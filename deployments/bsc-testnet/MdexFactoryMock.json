{
  "address": "0xc571C8C976a8517A0dFEbB5a3e338DE2C65F873c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setFeeToRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe370afd3eea6323a13ee389095a22ae67e6b87355f92595b24b70043b0afa5c1",
  "receipt": {
    "to": null,
    "from": "0x71b29689f42a50Ae234f1415C9158Adc458c2348",
    "contractAddress": "0xc571C8C976a8517A0dFEbB5a3e338DE2C65F873c",
    "transactionIndex": 2,
    "gasUsed": "3503389",
    "logsBloom": "0x
    "blockHash": "0xf1bbd4f18dca498b66454d9b4567ff44570631249037d58d13ea053d880b4466",
    "transactionHash": "0xe370afd3eea6323a13ee389095a22ae67e6b87355f92595b24b70043b0afa5c1",
    "logs": [],
    "blockNumber": 10038322,
    "cumulativeGasUsed": "11486355",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "b61a49f062f894e33f051ecdab4b0db2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setFeeToRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MdxSwapMock.sol\":\"MdexFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/mocks/MdxSwapMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0 <0.8.0;\\n\\ninterface IHswapV2Callee {\\n    function hswapV2Call(\\n        address sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\\ninterface IMdexFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function feeToRate() external view returns (uint256);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setFeeToRate(uint256) external;\\n\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    function pairFor(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external view returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external view returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\\ninterface IMdexPair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function price(address token, uint256 baseDecimal) external view returns (uint256);\\n\\n    function initialize(address, address) external;\\n}\\n\\ncontract MdexERC20 {\\n    using SafeMath for uint256;\\n\\n    string public constant name = 'HSwap LP Token';\\n    string public constant symbol = 'HMDX';\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, 'MdexSwap: EXPIRED');\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    '\\\\x19\\\\x01',\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'MdexSwap: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\\ncontract MdexPair is MdexERC20 {\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'MdexSwap: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'MdexSwap: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, 'MdexSwap: FORBIDDEN');\\n        // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'MdexSwap: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n        // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IMdexFactory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint256 _kLast = kLast;\\n        // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = SafeMath.sqrt(uint256(_reserve0).mul(_reserve1));\\n                uint256 rootKLast = SafeMath.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint256 denominator = rootK.mul(IMdexFactory(factory).feeToRate()).add(rootKLast);\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n        // gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = SafeMath.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = SafeMath.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'MdexSwap: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1);\\n        // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n        // gas savings\\n        address _token0 = token0;\\n        // gas savings\\n        address _token1 = token1;\\n        // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply;\\n        // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply;\\n        // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'MdexSwap: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1);\\n        // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'MdexSwap: INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n        // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'MdexSwap: INSUFFICIENT_LIQUIDITY');\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, 'MdexSwap: INVALID_TO');\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\\n            // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\\n            // optimistically transfer tokens\\n            if (data.length > 0) IHswapV2Callee(to).hswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'MdexSwap: INSUFFICIENT_INPUT_AMOUNT');\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(1000**2), 'MdexSwap: K');\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0;\\n        // gas savings\\n        address _token1 = token1;\\n        // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n\\n    function price(address token, uint256 baseDecimal) public view returns (uint256) {\\n        if ((token0 != token && token1 != token) || 0 == reserve0 || 0 == reserve1) {\\n            return 0;\\n        }\\n        if (token0 == token) {\\n            return uint256(reserve1).mul(baseDecimal).div(uint256(reserve0));\\n        } else {\\n            return uint256(reserve0).mul(baseDecimal).div(uint256(reserve1));\\n        }\\n    }\\n}\\n\\ncontract MdexFactory {\\n    using SafeMath for uint256;\\n    address public feeTo;\\n    address public feeToSetter;\\n    uint256 public feeToRate;\\n    bytes32 public initCodeHash;\\n\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n        initCodeHash = keccak256(abi.encodePacked(type(MdexPair).creationCode));\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(tokenA != tokenB, 'MdexSwapFactory: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'MdexSwapFactory: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'MdexSwapFactory: PAIR_EXISTS');\\n        // single check is sufficient\\n        bytes memory bytecode = type(MdexPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IMdexPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair;\\n        // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, 'MdexSwapFactory: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, 'MdexSwapFactory: FORBIDDEN');\\n        require(_feeToSetter != address(0), 'MdexSwapFactory: FeeToSetter is zero address');\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setFeeToRate(uint256 _rate) external {\\n        require(msg.sender == feeToSetter, 'MdexSwapFactory: FORBIDDEN');\\n        require(_rate > 0, 'MdexSwapFactory: FEE_TO_RATE_OVERFLOW');\\n        feeToRate = _rate.sub(1);\\n    }\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) public pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'MdexSwapFactory: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'MdexSwapFactory: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address tokenA, address tokenB) public view returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint256(keccak256(abi.encodePacked(hex'ff', address(this), keccak256(abi.encodePacked(token0, token1)), initCodeHash))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address tokenA, address tokenB) public view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IMdexPair(pairFor(tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) public pure returns (uint256 amountB) {\\n        require(amountA > 0, 'MdexSwapFactory: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'MdexSwapFactory: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) public pure returns (uint256 amountOut) {\\n        require(amountIn > 0, 'MdexSwapFactory: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'MdexSwapFactory: INSUFFICIENT_LIQUIDITY');\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) public pure returns (uint256 amountIn) {\\n        require(amountOut > 0, 'MdexSwapFactory: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'MdexSwapFactory: INSUFFICIENT_LIQUIDITY');\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(uint256 amountIn, address[] memory path) public view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, 'MdexSwapFactory: INVALID_PATH');\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(uint256 amountOut, address[] memory path) public view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, 'MdexSwapFactory: INVALID_PATH');\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112;\\n        // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\\nlibrary SafeMath {\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    function wad() public pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\\n        if (a > 3) {\\n            b = a;\\n            uint256 x = a / 2 + 1;\\n            while (x < b) {\\n                b = x;\\n                x = (a / x + x) / 2;\\n            }\\n        } else if (a != 0) {\\n            b = 1;\\n        }\\n    }\\n\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mul(a, b) / WAD;\\n    }\\n\\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add(mul(a, b), WAD / 2) / WAD;\\n    }\\n\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mul(a, b) / RAY;\\n    }\\n\\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add(mul(a, b), RAY / 2) / RAY;\\n    }\\n\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(mul(a, WAD), b);\\n    }\\n\\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add(mul(a, WAD), b / 2) / b;\\n    }\\n\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(mul(a, RAY), b);\\n    }\\n\\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add(mul(a, RAY), b / 2) / b;\\n    }\\n\\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\\n        uint256 result = WAD;\\n        while (n > 0) {\\n            if (n % 2 != 0) {\\n                result = wmul(result, x);\\n            }\\n            x = wmul(x, x);\\n            n /= 2;\\n        }\\n        return result;\\n    }\\n\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\\n        uint256 result = RAY;\\n        while (n > 0) {\\n            if (n % 2 != 0) {\\n                result = rmul(result, x);\\n            }\\n            x = rmul(x, x);\\n            n /= 2;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xf3cfa3201ee381b3c3fc26a23b56b70f3f35e2801ae648403a8e287be9397680\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162006173380380620061738339818101604052602081101561003557600080fd5b5051600180546001600160a01b0319166001600160a01b038316179055604051610061602082016100ee565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106100a75780518252601f199092019160209182019101610088565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120600381905550506100fc565b6125b78062003bbc83390190565b613ab0806200010c6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063a2e74af6116100ad578063d52bb6f411610071578063d52bb6f4146104a6578063db4c545e146104ed578063deba86e3146104f5578063e6a43905146104fd578063f46901ed1461052b57610121565b8063a2e74af614610360578063ad615dec14610388578063b5e4aa72146103b1578063c9c65396146103ce578063d06ca61f146103fc57610121565b80631f00ca74116100f45780631f00ca74146101aa578063544caa56146102a4578063574f2ba31461030157806385f8c2591461030957806396ed28f91461033257610121565b8063017e7e5814610126578063054d50d41461014a578063094b7415146101855780631e3dd18b1461018d575b600080fd5b61012e610551565b604080516001600160a01b039092168252519081900360200190f35b6101736004803603606081101561016057600080fd5b5080359060208101359060400135610560565b60408051918252519081900360200190f35b61012e610638565b61012e600480360360208110156101a357600080fd5b5035610647565b610254600480360360408110156101c057600080fd5b813591908101906040810160208201356401000000008111156101e257600080fd5b8201836020820111156101f457600080fd5b8035906020019184602083028401116401000000008311171561021657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610671945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610290578181015183820152602001610278565b505050509050019250505060405180910390f35b6102d2600480360360408110156102ba57600080fd5b506001600160a01b03813581169160200135166107bc565b60405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390f35b61017361089a565b6101736004803603606081101561031f57600080fd5b50803590602081013590604001356108a0565b61012e6004803603604081101561034857600080fd5b506001600160a01b0381358116916020013516610978565b6103866004803603602081101561037657600080fd5b50356001600160a01b0316610a0d565b005b6101736004803603606081101561039e57600080fd5b5080359060208101359060400135610ad0565b610386600480360360208110156103c757600080fd5b5035610b76565b61012e600480360360408110156103e457600080fd5b506001600160a01b0381358116916020013516610c22565b6102546004803603604081101561041257600080fd5b8135919081019060408101602082013564010000000081111561043457600080fd5b82018360208201111561044657600080fd5b8035906020019184602083028401116401000000008311171561046857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610f3e945050505050565b6104d4600480360360408110156104bc57600080fd5b506001600160a01b0381358116916020013516611074565b6040805192835260208301919091528051918290030190f35b610173611140565b610173611146565b61012e6004803603604081101561051357600080fd5b506001600160a01b038135811691602001351661114c565b6103866004803603602081101561054157600080fd5b50356001600160a01b0316611172565b6000546001600160a01b031681565b60008084116105a05760405162461bcd60e51b815260040180806020018281038252602a815260200180613970602a913960400191505060405180910390fd5b6000831180156105b05750600082115b6105eb5760405162461bcd60e51b815260040180806020018281038252602781526020018061399a6027913960400191505060405180910390fd5b60006105f9856103e56111f0565b9050600061060782856111f0565b905060006106218361061b886103e86111f0565b90611252565b905080828161062c57fe5b04979650505050505050565b6001546001600160a01b031681565b6005818154811061065757600080fd5b6000918252602090912001546001600160a01b0316905081565b60606002825110156106ca576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a20494e56414c49445f50415448000000604482015290519081900360640190fd5b815167ffffffffffffffff811180156106e257600080fd5b5060405190808252806020026020018201604052801561070c578160200160208202803683370190505b509050828160018351038151811061072057fe5b60209081029190910101528151600019015b80156107b55760008061076e85600185038151811061074d57fe5b602002602001015186858151811061076157fe5b6020026020010151611074565b9150915061079084848151811061078157fe5b602002602001015183836108a0565b84600185038151811061079f57fe5b6020908102919091010152505060001901610732565b5092915050565b600080826001600160a01b0316846001600160a01b031614156108105760405162461bcd60e51b8152600401808060200182810382526024815260200180613a576024913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610610830578284610833565b83835b90925090506001600160a01b038216610893576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a205a45524f5f41444452455353000000604482015290519081900360640190fd5b9250929050565b60055490565b60008084116108e05760405162461bcd60e51b815260040180806020018281038252602b815260200180613945602b913960400191505060405180910390fd5b6000831180156108f05750600082115b61092b5760405162461bcd60e51b815260040180806020018281038252602781526020018061399a6027913960400191505060405180910390fd5b60006109436103e861093d86886111f0565b906111f0565b905060006109576103e561093d86896112ac565b905061096e600182848161096757fe5b0490611252565b9695505050505050565b600080600061098785856107bc565b604080516bffffffffffffffffffffffff19606094851b811660208084019190915293851b166034820152815160288183030181526048820183528051908401206003546001600160f81b031960688401523090951b6069830152607d820152609d808201949094528151808203909401845260bd019052815191012095945050505050565b6001546001600160a01b03163314610a69576040805162461bcd60e51b815260206004820152601a60248201527926b232bc29bbb0b82330b1ba37b93c9d102327a92124a22222a760311b604482015290519081900360640190fd5b6001600160a01b038116610aae5760405162461bcd60e51b815260040180806020018281038252602c8152602001806139c1602c913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000808411610b105760405162461bcd60e51b81526004018080602001828103825260248152602001806139ed6024913960400191505060405180910390fd5b600083118015610b205750600082115b610b5b5760405162461bcd60e51b815260040180806020018281038252602781526020018061399a6027913960400191505060405180910390fd5b82610b6685846111f0565b81610b6d57fe5b04949350505050565b6001546001600160a01b03163314610bd2576040805162461bcd60e51b815260206004820152601a60248201527926b232bc29bbb0b82330b1ba37b93c9d102327a92124a22222a760311b604482015290519081900360640190fd5b60008111610c115760405162461bcd60e51b8152600401808060200182810382526025815260200180613a326025913960400191505060405180910390fd5b610c1c8160016112ac565b60025550565b6000816001600160a01b0316836001600160a01b03161415610c755760405162461bcd60e51b8152600401808060200182810382526024815260200180613a576024913960400191505060405180910390fd5b600080836001600160a01b0316856001600160a01b031610610c98578385610c9b565b84845b90925090506001600160a01b038216610cfb576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a205a45524f5f41444452455353000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260046020908152604080832085851684529091529020541615610d75576040805162461bcd60e51b815260206004820152601c60248201527f4d64657853776170466163746f72793a20504149525f45584953545300000000604482015290519081900360640190fd5b606060405180602001610d8790611380565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450846001600160a01b031663485cc95585856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015610e5457600080fd5b505af1158015610e68573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526004602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b6060600282511015610f97576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a20494e56414c49445f50415448000000604482015290519081900360640190fd5b815167ffffffffffffffff81118015610faf57600080fd5b50604051908082528060200260200182016040528015610fd9578160200160208202803683370190505b5090508281600081518110610fea57fe5b60200260200101818152505060005b60018351038110156107b55760008061102e85848151811061101757fe5b602002602001015186856001018151811061076157fe5b9150915061105084848151811061104157fe5b60200260200101518383610560565b84846001018151811061105f57fe5b60209081029190910101525050600101610ff9565b600080600061108385856107bc565b5090506000806110938787610978565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156110cb57600080fd5b505afa1580156110df573d6000803e3d6000fd5b505050506040513d60608110156110f557600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b038781169084161461112f578082611132565b81815b909890975095505050505050565b60035481565b60025481565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b031633146111ce576040805162461bcd60e51b815260206004820152601a60248201527926b232bc29bbb0b82330b1ba37b93c9d102327a92124a22222a760311b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000826111ff5750600061124c565b8282028284828161120c57fe5b04146112495760405162461bcd60e51b8152600401808060200182810382526021815260200180613a116021913960400191505060405180910390fd5b90505b92915050565b600082820183811015611249576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061124983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156113785760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561133d578181015183820152602001611325565b50505050905090810190601f16801561136a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6125b78061138e8339019056fe60806040526001600c5534801561001557600080fd5b50604080518082018252600e81526d2429bbb0b8102628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f87dad95daa867d5e0494900019e929bdf17f889d19a25c4156e2329f51c7c345818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556124ab8061010c6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a71461057b578063d505accf14610583578063dd62ed3e146105d4578063fff6cae914610602576101c4565b8063ba9a7a5614610545578063bc25cf771461054d578063c45a015514610573576101c4565b806389afcb44116100d357806389afcb44146104a657806395d89b41146104e5578063a9059cbb146104ed578063ad9b802414610519576101c4565b806370a08231146104525780637464fc3d146104785780637ecebe0014610480576101c4565b806330adf81f11610166578063485cc95511610140578063485cc955146103ee5780635909c0d51461041c5780635a3d5493146104245780636a6278421461042c576101c4565b806330adf81f146103c0578063313ce567146103c85780633644e515146103e6576101c4565b8063095ea7b3116101a2578063095ea7b31461030c5780630dfe16811461034c57806318160ddd1461037057806323b872dd1461038a576101c4565b8063022c0d9f146101c957806306fdde03146102575780630902f1ac146102d4575b600080fd5b610255600480360360808110156101df57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561021657600080fd5b82018360208201111561022857600080fd5b8035906020019184600183028401116401000000008311171561024a57600080fd5b50909250905061060a565b005b61025f610b25565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610299578181015183820152602001610281565b50505050905090810190601f1680156102c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102dc610b4f565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103386004803603604081101561032257600080fd5b506001600160a01b038135169060200135610b79565b604080519115158252519081900360200190f35b610354610b90565b604080516001600160a01b039092168252519081900360200190f35b610378610b9f565b60408051918252519081900360200190f35b610338600480360360608110156103a057600080fd5b506001600160a01b03813581169160208101359091169060400135610ba5565b610378610c39565b6103d0610c5d565b6040805160ff9092168252519081900360200190f35b610378610c62565b6102556004803603604081101561040457600080fd5b506001600160a01b0381358116916020013516610c68565b610378610ceb565b610378610cf1565b6103786004803603602081101561044257600080fd5b50356001600160a01b0316610cf7565b6103786004803603602081101561046857600080fd5b50356001600160a01b0316610fd2565b610378610fe4565b6103786004803603602081101561049657600080fd5b50356001600160a01b0316610fea565b6104cc600480360360208110156104bc57600080fd5b50356001600160a01b0316610ffc565b6040805192835260208301919091528051918290030190f35b61025f61138f565b6103386004803603604081101561050357600080fd5b506001600160a01b0381351690602001356113af565b6103786004803603604081101561052f57600080fd5b506001600160a01b0381351690602001356113bc565b610378611494565b6102556004803603602081101561056357600080fd5b50356001600160a01b031661149a565b61035461160b565b61035461161a565b610255600480360360e081101561059957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611629565b610378600480360360408110156105ea57600080fd5b506001600160a01b038135811691602001351661182a565b610255611847565b600c54600114610654576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c55841515806106675750600084115b6106a25760405162461bcd60e51b81526004018080602001828103825260248152602001806123e76024913960400191505060405180910390fd5b6000806106ad610b4f565b5091509150816001600160701b0316871080156106d25750806001600160701b031686105b610723576040805162461bcd60e51b815260206004820181905260248201527f4d646578537761703a20494e53554646494349454e545f4c4951554944495459604482015290519081900360640190fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107615750806001600160a01b0316896001600160a01b031614155b6107a9576040805162461bcd60e51b81526020600482015260146024820152734d646578537761703a20494e56414c49445f544f60601b604482015290519081900360640190fd5b8a156107ba576107ba828a8d6119a8565b89156107cb576107cb818a8c6119a8565b861561087d57886001600160a01b031663226dc882338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561086457600080fd5b505af1158015610878573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108c357600080fd5b505afa1580156108d7573d6000803e3d6000fd5b505050506040513d60208110156108ed57600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561093957600080fd5b505afa15801561094d573d6000803e3d6000fd5b505050506040513d602081101561096357600080fd5b5051925060009150506001600160701b0385168a90038311610986576000610995565b89856001600160701b03160383035b9050600089856001600160701b03160383116109b25760006109c1565b89856001600160701b03160383035b905060008211806109d25750600081115b610a0d5760405162461bcd60e51b815260040180806020018281038252602381526020018061242c6023913960400191505060405180910390fd5b6000610a2f610a1d846003611b42565b610a29876103e8611b42565b90611ba2565b90506000610a41610a1d846003611b42565b9050610a66620f4240610a606001600160701b038b8116908b16611b42565b90611b42565b610a708383611b42565b1015610ab1576040805162461bcd60e51b815260206004820152600b60248201526a4d646578537761703a204b60a81b604482015290519081900360640190fd5b5050610abf84848888611be4565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600e81526020016d2429bbb0b8102628102a37b5b2b760911b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b86338484611da2565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610c24576001600160a01b0384166000908152600260209081526040808320338452909152902054610bff9083611ba2565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c2f848484611e04565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610cbd576040805162461bcd60e51b815260206004820152601360248201527226b232bc29bbb0b81d102327a92124a22222a760691b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610d43576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c81905580610d53610b4f565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610da757600080fd5b505afa158015610dbb573d6000803e3d6000fd5b505050506040513d6020811015610dd157600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e2457600080fd5b505afa158015610e38573d6000803e3d6000fd5b505050506040513d6020811015610e4e57600080fd5b505190506000610e67836001600160701b038716611ba2565b90506000610e7e836001600160701b038716611ba2565b90506000610e8c8787611eb2565b60005490915080610ec357610eaf6103e8610a29610eaa8787611b42565b61206b565b9850610ebe60006103e86120bd565b610f06565b610f036001600160701b038916610eda8684611b42565b81610ee157fe5b046001600160701b038916610ef68685611b42565b81610efd57fe5b04612147565b98505b60008911610f455760405162461bcd60e51b815260040180806020018281038252602781526020018061244f6027913960400191505060405180910390fd5b610f4f8a8a6120bd565b610f5b86868a8a611be4565b8115610f8557600854610f81906001600160701b0380821691600160701b900416611b42565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c54600114611049576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c81905580611059610b4f565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156110b557600080fd5b505afa1580156110c9573d6000803e3d6000fd5b505050506040513d60208110156110df57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561112d57600080fd5b505afa158015611141573d6000803e3d6000fd5b505050506040513d602081101561115757600080fd5b5051306000908152600160205260408120549192506111768888611eb2565b600054909150806111878487611b42565b8161118e57fe5b049a508061119c8486611b42565b816111a357fe5b04995060008b1180156111b6575060008a115b6111f15760405162461bcd60e51b81526004018080602001828103825260278152602001806123c06027913960400191505060405180910390fd5b6111fb308461215e565b611206878d8d6119a8565b611211868d8c6119a8565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561125757600080fd5b505afa15801561126b573d6000803e3d6000fd5b505050506040513d602081101561128157600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b1580156112cd57600080fd5b505afa1580156112e1573d6000803e3d6000fd5b505050506040513d60208110156112f757600080fd5b5051935061130785858b8b611be4565b81156113315760085461132d906001600160701b0380821691600160701b900416611b42565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b604051806040016040528060048152602001630909a88b60e31b81525081565b6000610b86338484611e04565b6006546000906001600160a01b038481169116148015906113eb57506007546001600160a01b03848116911614155b806113ff57506008546001600160701b0316155b8061141a5750600854600160701b90046001600160701b0316155b1561142757506000610b8a565b6006546001600160a01b038481169116141561147057600854611469906001600160701b038082169161146391600160701b9091041685611b42565b906121f0565b9050610b8a565b600854611469906001600160701b03600160701b8204811691611463911685611b42565b6103e881565b600c546001146114e4576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b03948516949093169261158d9285928792611588926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561155657600080fd5b505afa15801561156a573d6000803e3d6000fd5b505050506040513d602081101561158057600080fd5b505190611ba2565b6119a8565b61160181846115886008600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561155657600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b42841015611672576040805162461bcd60e51b81526020600482015260116024820152701359195e14ddd85c0e8811561412549151607a1b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa15801561178d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117c35750886001600160a01b0316816001600160a01b0316145b611814576040805162461bcd60e51b815260206004820152601b60248201527f4d646578537761703a20494e56414c49445f5349474e41545552450000000000604482015290519081900360640190fd5b61181f898989611da2565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c54600114611891576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c55600654604080516370a0823160e01b815230600482015290516119a1926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156118e257600080fd5b505afa1580156118f6573d6000803e3d6000fd5b505050506040513d602081101561190c57600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561195957600080fd5b505afa15801561196d573d6000803e3d6000fd5b505050506040513d602081101561198357600080fd5b50516008546001600160701b0380821691600160701b900416611be4565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611a555780518252601f199092019160209182019101611a36565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611ab7576040519150601f19603f3d011682016040523d82523d6000602084013e611abc565b606091505b5091509150818015611aea575080511580611aea5750808060200190516020811015611ae757600080fd5b50515b611b3b576040805162461bcd60e51b815260206004820152601960248201527f4d646578537761703a205452414e534645525f4641494c454400000000000000604482015290519081900360640190fd5b5050505050565b600082611b5157506000610b8a565b82820282848281611b5e57fe5b0414611b9b5760405162461bcd60e51b815260040180806020018281038252602181526020018061240b6021913960400191505060405180910390fd5b9392505050565b6000611b9b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612232565b6001600160701b038411801590611c0257506001600160701b038311155b611c48576040805162461bcd60e51b81526020600482015260126024820152714d646578537761703a204f564552464c4f5760701b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611c7857506001600160701b03841615155b8015611c8c57506001600160701b03831615155b15611cf7578063ffffffff16611cb485611ca5866122c9565b6001600160e01b0316906122db565b600980546001600160e01b03929092169290920201905563ffffffff8116611cdf84611ca5876122c9565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611e279082611ba2565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611e569082612300565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0357600080fd5b505afa158015611f17573d6000803e3d6000fd5b505050506040513d6020811015611f2d57600080fd5b5051600b546001600160a01b038216158015945091925090612057578015612052576000611f6a610eaa6001600160701b03888116908816611b42565b90506000611f778361206b565b90508082111561204f576000611f99611f908484611ba2565b60005490611b42565b9050600061202b83612025600560009054906101000a90046001600160a01b03166001600160a01b031663deba86e36040518163ffffffff1660e01b815260040160206040518083038186803b158015611ff257600080fd5b505afa158015612006573d6000803e3d6000fd5b505050506040513d602081101561201c57600080fd5b50518790611b42565b90612300565b9050600081838161203857fe5b049050801561204b5761204b87826120bd565b5050505b50505b612063565b8015612063576000600b555b505092915050565b600060038211156120ae575080600160028204015b818110156120a85780915060028182858161209757fe5b0401816120a057fe5b049050612080565b506120b8565b81156120b8575060015b919050565b6000546120ca9082612300565b60009081556001600160a01b0383168152600160205260409020546120ef9082612300565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818311156121575781611b9b565b5090919050565b6001600160a01b0382166000908152600160205260409020546121819082611ba2565b6001600160a01b038316600090815260016020526040812091909155546121a89082611ba2565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6000611b9b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061235a565b600081848411156122c15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561228657818101518382015260200161226e565b50505050905090810190601f1680156122b35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816122f857fe5b049392505050565b600082820183811015611b9b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081836123a95760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561228657818101518382015260200161226e565b5060008385816123b557fe5b049594505050505056fe4d646578537761703a20494e53554646494349454e545f4c49515549444954595f4255524e45444d646578537761703a20494e53554646494349454e545f4f55545055545f414d4f554e54536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d646578537761703a20494e53554646494349454e545f494e5055545f414d4f554e544d646578537761703a20494e53554646494349454e545f4c49515549444954595f4d494e544544a2646970667358221220638640d6424c745e42409ff31bf875a95518f6711fc0c4afbe12ec03fd25485e64736f6c634300070400334d64657853776170466163746f72793a20494e53554646494349454e545f4f55545055545f414d4f554e544d64657853776170466163746f72793a20494e53554646494349454e545f494e5055545f414d4f554e544d64657853776170466163746f72793a20494e53554646494349454e545f4c49515549444954594d64657853776170466163746f72793a20466565546f536574746572206973207a65726f20616464726573734d64657853776170466163746f72793a20494e53554646494349454e545f414d4f554e54536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d64657853776170466163746f72793a204645455f544f5f524154455f4f564552464c4f574d64657853776170466163746f72793a204944454e544943414c5f414444524553534553a26469706673582212205bd599b4b7ec7cc30adb668d31d67891e76144f4f6774f27d33453e9da968c5964736f6c6343000704003360806040526001600c5534801561001557600080fd5b50604080518082018252600e81526d2429bbb0b8102628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f87dad95daa867d5e0494900019e929bdf17f889d19a25c4156e2329f51c7c345818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556124ab8061010c6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a71461057b578063d505accf14610583578063dd62ed3e146105d4578063fff6cae914610602576101c4565b8063ba9a7a5614610545578063bc25cf771461054d578063c45a015514610573576101c4565b806389afcb44116100d357806389afcb44146104a657806395d89b41146104e5578063a9059cbb146104ed578063ad9b802414610519576101c4565b806370a08231146104525780637464fc3d146104785780637ecebe0014610480576101c4565b806330adf81f11610166578063485cc95511610140578063485cc955146103ee5780635909c0d51461041c5780635a3d5493146104245780636a6278421461042c576101c4565b806330adf81f146103c0578063313ce567146103c85780633644e515146103e6576101c4565b8063095ea7b3116101a2578063095ea7b31461030c5780630dfe16811461034c57806318160ddd1461037057806323b872dd1461038a576101c4565b8063022c0d9f146101c957806306fdde03146102575780630902f1ac146102d4575b600080fd5b610255600480360360808110156101df57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561021657600080fd5b82018360208201111561022857600080fd5b8035906020019184600183028401116401000000008311171561024a57600080fd5b50909250905061060a565b005b61025f610b25565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610299578181015183820152602001610281565b50505050905090810190601f1680156102c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102dc610b4f565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103386004803603604081101561032257600080fd5b506001600160a01b038135169060200135610b79565b604080519115158252519081900360200190f35b610354610b90565b604080516001600160a01b039092168252519081900360200190f35b610378610b9f565b60408051918252519081900360200190f35b610338600480360360608110156103a057600080fd5b506001600160a01b03813581169160208101359091169060400135610ba5565b610378610c39565b6103d0610c5d565b6040805160ff9092168252519081900360200190f35b610378610c62565b6102556004803603604081101561040457600080fd5b506001600160a01b0381358116916020013516610c68565b610378610ceb565b610378610cf1565b6103786004803603602081101561044257600080fd5b50356001600160a01b0316610cf7565b6103786004803603602081101561046857600080fd5b50356001600160a01b0316610fd2565b610378610fe4565b6103786004803603602081101561049657600080fd5b50356001600160a01b0316610fea565b6104cc600480360360208110156104bc57600080fd5b50356001600160a01b0316610ffc565b6040805192835260208301919091528051918290030190f35b61025f61138f565b6103386004803603604081101561050357600080fd5b506001600160a01b0381351690602001356113af565b6103786004803603604081101561052f57600080fd5b506001600160a01b0381351690602001356113bc565b610378611494565b6102556004803603602081101561056357600080fd5b50356001600160a01b031661149a565b61035461160b565b61035461161a565b610255600480360360e081101561059957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611629565b610378600480360360408110156105ea57600080fd5b506001600160a01b038135811691602001351661182a565b610255611847565b600c54600114610654576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c55841515806106675750600084115b6106a25760405162461bcd60e51b81526004018080602001828103825260248152602001806123e76024913960400191505060405180910390fd5b6000806106ad610b4f565b5091509150816001600160701b0316871080156106d25750806001600160701b031686105b610723576040805162461bcd60e51b815260206004820181905260248201527f4d646578537761703a20494e53554646494349454e545f4c4951554944495459604482015290519081900360640190fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107615750806001600160a01b0316896001600160a01b031614155b6107a9576040805162461bcd60e51b81526020600482015260146024820152734d646578537761703a20494e56414c49445f544f60601b604482015290519081900360640190fd5b8a156107ba576107ba828a8d6119a8565b89156107cb576107cb818a8c6119a8565b861561087d57886001600160a01b031663226dc882338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561086457600080fd5b505af1158015610878573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108c357600080fd5b505afa1580156108d7573d6000803e3d6000fd5b505050506040513d60208110156108ed57600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561093957600080fd5b505afa15801561094d573d6000803e3d6000fd5b505050506040513d602081101561096357600080fd5b5051925060009150506001600160701b0385168a90038311610986576000610995565b89856001600160701b03160383035b9050600089856001600160701b03160383116109b25760006109c1565b89856001600160701b03160383035b905060008211806109d25750600081115b610a0d5760405162461bcd60e51b815260040180806020018281038252602381526020018061242c6023913960400191505060405180910390fd5b6000610a2f610a1d846003611b42565b610a29876103e8611b42565b90611ba2565b90506000610a41610a1d846003611b42565b9050610a66620f4240610a606001600160701b038b8116908b16611b42565b90611b42565b610a708383611b42565b1015610ab1576040805162461bcd60e51b815260206004820152600b60248201526a4d646578537761703a204b60a81b604482015290519081900360640190fd5b5050610abf84848888611be4565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600e81526020016d2429bbb0b8102628102a37b5b2b760911b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b86338484611da2565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610c24576001600160a01b0384166000908152600260209081526040808320338452909152902054610bff9083611ba2565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c2f848484611e04565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610cbd576040805162461bcd60e51b815260206004820152601360248201527226b232bc29bbb0b81d102327a92124a22222a760691b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610d43576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c81905580610d53610b4f565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610da757600080fd5b505afa158015610dbb573d6000803e3d6000fd5b505050506040513d6020811015610dd157600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e2457600080fd5b505afa158015610e38573d6000803e3d6000fd5b505050506040513d6020811015610e4e57600080fd5b505190506000610e67836001600160701b038716611ba2565b90506000610e7e836001600160701b038716611ba2565b90506000610e8c8787611eb2565b60005490915080610ec357610eaf6103e8610a29610eaa8787611b42565b61206b565b9850610ebe60006103e86120bd565b610f06565b610f036001600160701b038916610eda8684611b42565b81610ee157fe5b046001600160701b038916610ef68685611b42565b81610efd57fe5b04612147565b98505b60008911610f455760405162461bcd60e51b815260040180806020018281038252602781526020018061244f6027913960400191505060405180910390fd5b610f4f8a8a6120bd565b610f5b86868a8a611be4565b8115610f8557600854610f81906001600160701b0380821691600160701b900416611b42565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c54600114611049576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c81905580611059610b4f565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156110b557600080fd5b505afa1580156110c9573d6000803e3d6000fd5b505050506040513d60208110156110df57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561112d57600080fd5b505afa158015611141573d6000803e3d6000fd5b505050506040513d602081101561115757600080fd5b5051306000908152600160205260408120549192506111768888611eb2565b600054909150806111878487611b42565b8161118e57fe5b049a508061119c8486611b42565b816111a357fe5b04995060008b1180156111b6575060008a115b6111f15760405162461bcd60e51b81526004018080602001828103825260278152602001806123c06027913960400191505060405180910390fd5b6111fb308461215e565b611206878d8d6119a8565b611211868d8c6119a8565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561125757600080fd5b505afa15801561126b573d6000803e3d6000fd5b505050506040513d602081101561128157600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b1580156112cd57600080fd5b505afa1580156112e1573d6000803e3d6000fd5b505050506040513d60208110156112f757600080fd5b5051935061130785858b8b611be4565b81156113315760085461132d906001600160701b0380821691600160701b900416611b42565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b604051806040016040528060048152602001630909a88b60e31b81525081565b6000610b86338484611e04565b6006546000906001600160a01b038481169116148015906113eb57506007546001600160a01b03848116911614155b806113ff57506008546001600160701b0316155b8061141a5750600854600160701b90046001600160701b0316155b1561142757506000610b8a565b6006546001600160a01b038481169116141561147057600854611469906001600160701b038082169161146391600160701b9091041685611b42565b906121f0565b9050610b8a565b600854611469906001600160701b03600160701b8204811691611463911685611b42565b6103e881565b600c546001146114e4576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b03948516949093169261158d9285928792611588926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561155657600080fd5b505afa15801561156a573d6000803e3d6000fd5b505050506040513d602081101561158057600080fd5b505190611ba2565b6119a8565b61160181846115886008600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561155657600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b42841015611672576040805162461bcd60e51b81526020600482015260116024820152701359195e14ddd85c0e8811561412549151607a1b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa15801561178d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117c35750886001600160a01b0316816001600160a01b0316145b611814576040805162461bcd60e51b815260206004820152601b60248201527f4d646578537761703a20494e56414c49445f5349474e41545552450000000000604482015290519081900360640190fd5b61181f898989611da2565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c54600114611891576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c55600654604080516370a0823160e01b815230600482015290516119a1926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156118e257600080fd5b505afa1580156118f6573d6000803e3d6000fd5b505050506040513d602081101561190c57600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561195957600080fd5b505afa15801561196d573d6000803e3d6000fd5b505050506040513d602081101561198357600080fd5b50516008546001600160701b0380821691600160701b900416611be4565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611a555780518252601f199092019160209182019101611a36565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611ab7576040519150601f19603f3d011682016040523d82523d6000602084013e611abc565b606091505b5091509150818015611aea575080511580611aea5750808060200190516020811015611ae757600080fd5b50515b611b3b576040805162461bcd60e51b815260206004820152601960248201527f4d646578537761703a205452414e534645525f4641494c454400000000000000604482015290519081900360640190fd5b5050505050565b600082611b5157506000610b8a565b82820282848281611b5e57fe5b0414611b9b5760405162461bcd60e51b815260040180806020018281038252602181526020018061240b6021913960400191505060405180910390fd5b9392505050565b6000611b9b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612232565b6001600160701b038411801590611c0257506001600160701b038311155b611c48576040805162461bcd60e51b81526020600482015260126024820152714d646578537761703a204f564552464c4f5760701b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611c7857506001600160701b03841615155b8015611c8c57506001600160701b03831615155b15611cf7578063ffffffff16611cb485611ca5866122c9565b6001600160e01b0316906122db565b600980546001600160e01b03929092169290920201905563ffffffff8116611cdf84611ca5876122c9565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611e279082611ba2565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611e569082612300565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0357600080fd5b505afa158015611f17573d6000803e3d6000fd5b505050506040513d6020811015611f2d57600080fd5b5051600b546001600160a01b038216158015945091925090612057578015612052576000611f6a610eaa6001600160701b03888116908816611b42565b90506000611f778361206b565b90508082111561204f576000611f99611f908484611ba2565b60005490611b42565b9050600061202b83612025600560009054906101000a90046001600160a01b03166001600160a01b031663deba86e36040518163ffffffff1660e01b815260040160206040518083038186803b158015611ff257600080fd5b505afa158015612006573d6000803e3d6000fd5b505050506040513d602081101561201c57600080fd5b50518790611b42565b90612300565b9050600081838161203857fe5b049050801561204b5761204b87826120bd565b5050505b50505b612063565b8015612063576000600b555b505092915050565b600060038211156120ae575080600160028204015b818110156120a85780915060028182858161209757fe5b0401816120a057fe5b049050612080565b506120b8565b81156120b8575060015b919050565b6000546120ca9082612300565b60009081556001600160a01b0383168152600160205260409020546120ef9082612300565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818311156121575781611b9b565b5090919050565b6001600160a01b0382166000908152600160205260409020546121819082611ba2565b6001600160a01b038316600090815260016020526040812091909155546121a89082611ba2565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6000611b9b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061235a565b600081848411156122c15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561228657818101518382015260200161226e565b50505050905090810190601f1680156122b35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816122f857fe5b049392505050565b600082820183811015611b9b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081836123a95760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561228657818101518382015260200161226e565b5060008385816123b557fe5b049594505050505056fe4d646578537761703a20494e53554646494349454e545f4c49515549444954595f4255524e45444d646578537761703a20494e53554646494349454e545f4f55545055545f414d4f554e54536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d646578537761703a20494e53554646494349454e545f494e5055545f414d4f554e544d646578537761703a20494e53554646494349454e545f4c49515549444954595f4d494e544544a2646970667358221220638640d6424c745e42409ff31bf875a95518f6711fc0c4afbe12ec03fd25485e64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063a2e74af6116100ad578063d52bb6f411610071578063d52bb6f4146104a6578063db4c545e146104ed578063deba86e3146104f5578063e6a43905146104fd578063f46901ed1461052b57610121565b8063a2e74af614610360578063ad615dec14610388578063b5e4aa72146103b1578063c9c65396146103ce578063d06ca61f146103fc57610121565b80631f00ca74116100f45780631f00ca74146101aa578063544caa56146102a4578063574f2ba31461030157806385f8c2591461030957806396ed28f91461033257610121565b8063017e7e5814610126578063054d50d41461014a578063094b7415146101855780631e3dd18b1461018d575b600080fd5b61012e610551565b604080516001600160a01b039092168252519081900360200190f35b6101736004803603606081101561016057600080fd5b5080359060208101359060400135610560565b60408051918252519081900360200190f35b61012e610638565b61012e600480360360208110156101a357600080fd5b5035610647565b610254600480360360408110156101c057600080fd5b813591908101906040810160208201356401000000008111156101e257600080fd5b8201836020820111156101f457600080fd5b8035906020019184602083028401116401000000008311171561021657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610671945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610290578181015183820152602001610278565b505050509050019250505060405180910390f35b6102d2600480360360408110156102ba57600080fd5b506001600160a01b03813581169160200135166107bc565b60405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390f35b61017361089a565b6101736004803603606081101561031f57600080fd5b50803590602081013590604001356108a0565b61012e6004803603604081101561034857600080fd5b506001600160a01b0381358116916020013516610978565b6103866004803603602081101561037657600080fd5b50356001600160a01b0316610a0d565b005b6101736004803603606081101561039e57600080fd5b5080359060208101359060400135610ad0565b610386600480360360208110156103c757600080fd5b5035610b76565b61012e600480360360408110156103e457600080fd5b506001600160a01b0381358116916020013516610c22565b6102546004803603604081101561041257600080fd5b8135919081019060408101602082013564010000000081111561043457600080fd5b82018360208201111561044657600080fd5b8035906020019184602083028401116401000000008311171561046857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610f3e945050505050565b6104d4600480360360408110156104bc57600080fd5b506001600160a01b0381358116916020013516611074565b6040805192835260208301919091528051918290030190f35b610173611140565b610173611146565b61012e6004803603604081101561051357600080fd5b506001600160a01b038135811691602001351661114c565b6103866004803603602081101561054157600080fd5b50356001600160a01b0316611172565b6000546001600160a01b031681565b60008084116105a05760405162461bcd60e51b815260040180806020018281038252602a815260200180613970602a913960400191505060405180910390fd5b6000831180156105b05750600082115b6105eb5760405162461bcd60e51b815260040180806020018281038252602781526020018061399a6027913960400191505060405180910390fd5b60006105f9856103e56111f0565b9050600061060782856111f0565b905060006106218361061b886103e86111f0565b90611252565b905080828161062c57fe5b04979650505050505050565b6001546001600160a01b031681565b6005818154811061065757600080fd5b6000918252602090912001546001600160a01b0316905081565b60606002825110156106ca576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a20494e56414c49445f50415448000000604482015290519081900360640190fd5b815167ffffffffffffffff811180156106e257600080fd5b5060405190808252806020026020018201604052801561070c578160200160208202803683370190505b509050828160018351038151811061072057fe5b60209081029190910101528151600019015b80156107b55760008061076e85600185038151811061074d57fe5b602002602001015186858151811061076157fe5b6020026020010151611074565b9150915061079084848151811061078157fe5b602002602001015183836108a0565b84600185038151811061079f57fe5b6020908102919091010152505060001901610732565b5092915050565b600080826001600160a01b0316846001600160a01b031614156108105760405162461bcd60e51b8152600401808060200182810382526024815260200180613a576024913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610610830578284610833565b83835b90925090506001600160a01b038216610893576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a205a45524f5f41444452455353000000604482015290519081900360640190fd5b9250929050565b60055490565b60008084116108e05760405162461bcd60e51b815260040180806020018281038252602b815260200180613945602b913960400191505060405180910390fd5b6000831180156108f05750600082115b61092b5760405162461bcd60e51b815260040180806020018281038252602781526020018061399a6027913960400191505060405180910390fd5b60006109436103e861093d86886111f0565b906111f0565b905060006109576103e561093d86896112ac565b905061096e600182848161096757fe5b0490611252565b9695505050505050565b600080600061098785856107bc565b604080516bffffffffffffffffffffffff19606094851b811660208084019190915293851b166034820152815160288183030181526048820183528051908401206003546001600160f81b031960688401523090951b6069830152607d820152609d808201949094528151808203909401845260bd019052815191012095945050505050565b6001546001600160a01b03163314610a69576040805162461bcd60e51b815260206004820152601a60248201527926b232bc29bbb0b82330b1ba37b93c9d102327a92124a22222a760311b604482015290519081900360640190fd5b6001600160a01b038116610aae5760405162461bcd60e51b815260040180806020018281038252602c8152602001806139c1602c913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000808411610b105760405162461bcd60e51b81526004018080602001828103825260248152602001806139ed6024913960400191505060405180910390fd5b600083118015610b205750600082115b610b5b5760405162461bcd60e51b815260040180806020018281038252602781526020018061399a6027913960400191505060405180910390fd5b82610b6685846111f0565b81610b6d57fe5b04949350505050565b6001546001600160a01b03163314610bd2576040805162461bcd60e51b815260206004820152601a60248201527926b232bc29bbb0b82330b1ba37b93c9d102327a92124a22222a760311b604482015290519081900360640190fd5b60008111610c115760405162461bcd60e51b8152600401808060200182810382526025815260200180613a326025913960400191505060405180910390fd5b610c1c8160016112ac565b60025550565b6000816001600160a01b0316836001600160a01b03161415610c755760405162461bcd60e51b8152600401808060200182810382526024815260200180613a576024913960400191505060405180910390fd5b600080836001600160a01b0316856001600160a01b031610610c98578385610c9b565b84845b90925090506001600160a01b038216610cfb576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a205a45524f5f41444452455353000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260046020908152604080832085851684529091529020541615610d75576040805162461bcd60e51b815260206004820152601c60248201527f4d64657853776170466163746f72793a20504149525f45584953545300000000604482015290519081900360640190fd5b606060405180602001610d8790611380565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450846001600160a01b031663485cc95585856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015610e5457600080fd5b505af1158015610e68573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526004602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b6060600282511015610f97576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a20494e56414c49445f50415448000000604482015290519081900360640190fd5b815167ffffffffffffffff81118015610faf57600080fd5b50604051908082528060200260200182016040528015610fd9578160200160208202803683370190505b5090508281600081518110610fea57fe5b60200260200101818152505060005b60018351038110156107b55760008061102e85848151811061101757fe5b602002602001015186856001018151811061076157fe5b9150915061105084848151811061104157fe5b60200260200101518383610560565b84846001018151811061105f57fe5b60209081029190910101525050600101610ff9565b600080600061108385856107bc565b5090506000806110938787610978565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156110cb57600080fd5b505afa1580156110df573d6000803e3d6000fd5b505050506040513d60608110156110f557600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b038781169084161461112f578082611132565b81815b909890975095505050505050565b60035481565b60025481565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b031633146111ce576040805162461bcd60e51b815260206004820152601a60248201527926b232bc29bbb0b82330b1ba37b93c9d102327a92124a22222a760311b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000826111ff5750600061124c565b8282028284828161120c57fe5b04146112495760405162461bcd60e51b8152600401808060200182810382526021815260200180613a116021913960400191505060405180910390fd5b90505b92915050565b600082820183811015611249576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061124983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156113785760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561133d578181015183820152602001611325565b50505050905090810190601f16801561136a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6125b78061138e8339019056fe60806040526001600c5534801561001557600080fd5b50604080518082018252600e81526d2429bbb0b8102628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f87dad95daa867d5e0494900019e929bdf17f889d19a25c4156e2329f51c7c345818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556124ab8061010c6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a71461057b578063d505accf14610583578063dd62ed3e146105d4578063fff6cae914610602576101c4565b8063ba9a7a5614610545578063bc25cf771461054d578063c45a015514610573576101c4565b806389afcb44116100d357806389afcb44146104a657806395d89b41146104e5578063a9059cbb146104ed578063ad9b802414610519576101c4565b806370a08231146104525780637464fc3d146104785780637ecebe0014610480576101c4565b806330adf81f11610166578063485cc95511610140578063485cc955146103ee5780635909c0d51461041c5780635a3d5493146104245780636a6278421461042c576101c4565b806330adf81f146103c0578063313ce567146103c85780633644e515146103e6576101c4565b8063095ea7b3116101a2578063095ea7b31461030c5780630dfe16811461034c57806318160ddd1461037057806323b872dd1461038a576101c4565b8063022c0d9f146101c957806306fdde03146102575780630902f1ac146102d4575b600080fd5b610255600480360360808110156101df57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561021657600080fd5b82018360208201111561022857600080fd5b8035906020019184600183028401116401000000008311171561024a57600080fd5b50909250905061060a565b005b61025f610b25565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610299578181015183820152602001610281565b50505050905090810190601f1680156102c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102dc610b4f565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103386004803603604081101561032257600080fd5b506001600160a01b038135169060200135610b79565b604080519115158252519081900360200190f35b610354610b90565b604080516001600160a01b039092168252519081900360200190f35b610378610b9f565b60408051918252519081900360200190f35b610338600480360360608110156103a057600080fd5b506001600160a01b03813581169160208101359091169060400135610ba5565b610378610c39565b6103d0610c5d565b6040805160ff9092168252519081900360200190f35b610378610c62565b6102556004803603604081101561040457600080fd5b506001600160a01b0381358116916020013516610c68565b610378610ceb565b610378610cf1565b6103786004803603602081101561044257600080fd5b50356001600160a01b0316610cf7565b6103786004803603602081101561046857600080fd5b50356001600160a01b0316610fd2565b610378610fe4565b6103786004803603602081101561049657600080fd5b50356001600160a01b0316610fea565b6104cc600480360360208110156104bc57600080fd5b50356001600160a01b0316610ffc565b6040805192835260208301919091528051918290030190f35b61025f61138f565b6103386004803603604081101561050357600080fd5b506001600160a01b0381351690602001356113af565b6103786004803603604081101561052f57600080fd5b506001600160a01b0381351690602001356113bc565b610378611494565b6102556004803603602081101561056357600080fd5b50356001600160a01b031661149a565b61035461160b565b61035461161a565b610255600480360360e081101561059957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611629565b610378600480360360408110156105ea57600080fd5b506001600160a01b038135811691602001351661182a565b610255611847565b600c54600114610654576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c55841515806106675750600084115b6106a25760405162461bcd60e51b81526004018080602001828103825260248152602001806123e76024913960400191505060405180910390fd5b6000806106ad610b4f565b5091509150816001600160701b0316871080156106d25750806001600160701b031686105b610723576040805162461bcd60e51b815260206004820181905260248201527f4d646578537761703a20494e53554646494349454e545f4c4951554944495459604482015290519081900360640190fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107615750806001600160a01b0316896001600160a01b031614155b6107a9576040805162461bcd60e51b81526020600482015260146024820152734d646578537761703a20494e56414c49445f544f60601b604482015290519081900360640190fd5b8a156107ba576107ba828a8d6119a8565b89156107cb576107cb818a8c6119a8565b861561087d57886001600160a01b031663226dc882338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561086457600080fd5b505af1158015610878573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108c357600080fd5b505afa1580156108d7573d6000803e3d6000fd5b505050506040513d60208110156108ed57600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561093957600080fd5b505afa15801561094d573d6000803e3d6000fd5b505050506040513d602081101561096357600080fd5b5051925060009150506001600160701b0385168a90038311610986576000610995565b89856001600160701b03160383035b9050600089856001600160701b03160383116109b25760006109c1565b89856001600160701b03160383035b905060008211806109d25750600081115b610a0d5760405162461bcd60e51b815260040180806020018281038252602381526020018061242c6023913960400191505060405180910390fd5b6000610a2f610a1d846003611b42565b610a29876103e8611b42565b90611ba2565b90506000610a41610a1d846003611b42565b9050610a66620f4240610a606001600160701b038b8116908b16611b42565b90611b42565b610a708383611b42565b1015610ab1576040805162461bcd60e51b815260206004820152600b60248201526a4d646578537761703a204b60a81b604482015290519081900360640190fd5b5050610abf84848888611be4565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600e81526020016d2429bbb0b8102628102a37b5b2b760911b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b86338484611da2565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610c24576001600160a01b0384166000908152600260209081526040808320338452909152902054610bff9083611ba2565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c2f848484611e04565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610cbd576040805162461bcd60e51b815260206004820152601360248201527226b232bc29bbb0b81d102327a92124a22222a760691b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610d43576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c81905580610d53610b4f565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610da757600080fd5b505afa158015610dbb573d6000803e3d6000fd5b505050506040513d6020811015610dd157600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e2457600080fd5b505afa158015610e38573d6000803e3d6000fd5b505050506040513d6020811015610e4e57600080fd5b505190506000610e67836001600160701b038716611ba2565b90506000610e7e836001600160701b038716611ba2565b90506000610e8c8787611eb2565b60005490915080610ec357610eaf6103e8610a29610eaa8787611b42565b61206b565b9850610ebe60006103e86120bd565b610f06565b610f036001600160701b038916610eda8684611b42565b81610ee157fe5b046001600160701b038916610ef68685611b42565b81610efd57fe5b04612147565b98505b60008911610f455760405162461bcd60e51b815260040180806020018281038252602781526020018061244f6027913960400191505060405180910390fd5b610f4f8a8a6120bd565b610f5b86868a8a611be4565b8115610f8557600854610f81906001600160701b0380821691600160701b900416611b42565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c54600114611049576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c81905580611059610b4f565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156110b557600080fd5b505afa1580156110c9573d6000803e3d6000fd5b505050506040513d60208110156110df57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561112d57600080fd5b505afa158015611141573d6000803e3d6000fd5b505050506040513d602081101561115757600080fd5b5051306000908152600160205260408120549192506111768888611eb2565b600054909150806111878487611b42565b8161118e57fe5b049a508061119c8486611b42565b816111a357fe5b04995060008b1180156111b6575060008a115b6111f15760405162461bcd60e51b81526004018080602001828103825260278152602001806123c06027913960400191505060405180910390fd5b6111fb308461215e565b611206878d8d6119a8565b611211868d8c6119a8565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561125757600080fd5b505afa15801561126b573d6000803e3d6000fd5b505050506040513d602081101561128157600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b1580156112cd57600080fd5b505afa1580156112e1573d6000803e3d6000fd5b505050506040513d60208110156112f757600080fd5b5051935061130785858b8b611be4565b81156113315760085461132d906001600160701b0380821691600160701b900416611b42565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b604051806040016040528060048152602001630909a88b60e31b81525081565b6000610b86338484611e04565b6006546000906001600160a01b038481169116148015906113eb57506007546001600160a01b03848116911614155b806113ff57506008546001600160701b0316155b8061141a5750600854600160701b90046001600160701b0316155b1561142757506000610b8a565b6006546001600160a01b038481169116141561147057600854611469906001600160701b038082169161146391600160701b9091041685611b42565b906121f0565b9050610b8a565b600854611469906001600160701b03600160701b8204811691611463911685611b42565b6103e881565b600c546001146114e4576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b03948516949093169261158d9285928792611588926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561155657600080fd5b505afa15801561156a573d6000803e3d6000fd5b505050506040513d602081101561158057600080fd5b505190611ba2565b6119a8565b61160181846115886008600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561155657600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b42841015611672576040805162461bcd60e51b81526020600482015260116024820152701359195e14ddd85c0e8811561412549151607a1b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa15801561178d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117c35750886001600160a01b0316816001600160a01b0316145b611814576040805162461bcd60e51b815260206004820152601b60248201527f4d646578537761703a20494e56414c49445f5349474e41545552450000000000604482015290519081900360640190fd5b61181f898989611da2565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c54600114611891576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600c55600654604080516370a0823160e01b815230600482015290516119a1926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156118e257600080fd5b505afa1580156118f6573d6000803e3d6000fd5b505050506040513d602081101561190c57600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561195957600080fd5b505afa15801561196d573d6000803e3d6000fd5b505050506040513d602081101561198357600080fd5b50516008546001600160701b0380821691600160701b900416611be4565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611a555780518252601f199092019160209182019101611a36565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611ab7576040519150601f19603f3d011682016040523d82523d6000602084013e611abc565b606091505b5091509150818015611aea575080511580611aea5750808060200190516020811015611ae757600080fd5b50515b611b3b576040805162461bcd60e51b815260206004820152601960248201527f4d646578537761703a205452414e534645525f4641494c454400000000000000604482015290519081900360640190fd5b5050505050565b600082611b5157506000610b8a565b82820282848281611b5e57fe5b0414611b9b5760405162461bcd60e51b815260040180806020018281038252602181526020018061240b6021913960400191505060405180910390fd5b9392505050565b6000611b9b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612232565b6001600160701b038411801590611c0257506001600160701b038311155b611c48576040805162461bcd60e51b81526020600482015260126024820152714d646578537761703a204f564552464c4f5760701b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611c7857506001600160701b03841615155b8015611c8c57506001600160701b03831615155b15611cf7578063ffffffff16611cb485611ca5866122c9565b6001600160e01b0316906122db565b600980546001600160e01b03929092169290920201905563ffffffff8116611cdf84611ca5876122c9565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611e279082611ba2565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611e569082612300565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0357600080fd5b505afa158015611f17573d6000803e3d6000fd5b505050506040513d6020811015611f2d57600080fd5b5051600b546001600160a01b038216158015945091925090612057578015612052576000611f6a610eaa6001600160701b03888116908816611b42565b90506000611f778361206b565b90508082111561204f576000611f99611f908484611ba2565b60005490611b42565b9050600061202b83612025600560009054906101000a90046001600160a01b03166001600160a01b031663deba86e36040518163ffffffff1660e01b815260040160206040518083038186803b158015611ff257600080fd5b505afa158015612006573d6000803e3d6000fd5b505050506040513d602081101561201c57600080fd5b50518790611b42565b90612300565b9050600081838161203857fe5b049050801561204b5761204b87826120bd565b5050505b50505b612063565b8015612063576000600b555b505092915050565b600060038211156120ae575080600160028204015b818110156120a85780915060028182858161209757fe5b0401816120a057fe5b049050612080565b506120b8565b81156120b8575060015b919050565b6000546120ca9082612300565b60009081556001600160a01b0383168152600160205260409020546120ef9082612300565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818311156121575781611b9b565b5090919050565b6001600160a01b0382166000908152600160205260409020546121819082611ba2565b6001600160a01b038316600090815260016020526040812091909155546121a89082611ba2565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6000611b9b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061235a565b600081848411156122c15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561228657818101518382015260200161226e565b50505050905090810190601f1680156122b35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816122f857fe5b049392505050565b600082820183811015611b9b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081836123a95760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561228657818101518382015260200161226e565b5060008385816123b557fe5b049594505050505056fe4d646578537761703a20494e53554646494349454e545f4c49515549444954595f4255524e45444d646578537761703a20494e53554646494349454e545f4f55545055545f414d4f554e54536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d646578537761703a20494e53554646494349454e545f494e5055545f414d4f554e544d646578537761703a20494e53554646494349454e545f4c49515549444954595f4d494e544544a2646970667358221220638640d6424c745e42409ff31bf875a95518f6711fc0c4afbe12ec03fd25485e64736f6c634300070400334d64657853776170466163746f72793a20494e53554646494349454e545f4f55545055545f414d4f554e544d64657853776170466163746f72793a20494e53554646494349454e545f494e5055545f414d4f554e544d64657853776170466163746f72793a20494e53554646494349454e545f4c49515549444954594d64657853776170466163746f72793a20466565546f536574746572206973207a65726f20616464726573734d64657853776170466163746f72793a20494e53554646494349454e545f414d4f554e54536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d64657853776170466163746f72793a204645455f544f5f524154455f4f564552464c4f574d64657853776170466163746f72793a204944454e544943414c5f414444524553534553a26469706673582212205bd599b4b7ec7cc30adb668d31d67891e76144f4f6774f27d33453e9da968c5964736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2020,
        "contract": "contracts/mocks/MdxSwapMock.sol:MdexFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2022,
        "contract": "contracts/mocks/MdxSwapMock.sol:MdexFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2024,
        "contract": "contracts/mocks/MdxSwapMock.sol:MdexFactory",
        "label": "feeToRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2026,
        "contract": "contracts/mocks/MdxSwapMock.sol:MdexFactory",
        "label": "initCodeHash",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 2032,
        "contract": "contracts/mocks/MdxSwapMock.sol:MdexFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 2035,
        "contract": "contracts/mocks/MdxSwapMock.sol:MdexFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}