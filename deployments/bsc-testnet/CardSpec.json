{
  "address": "0x1E9c6F7baF1Ed882B5276568879b44Dc585ef2d5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CARD_IDENTITY_BIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_IDENTITY_MASK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_IDENTITY_PADDING_BIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_PERSONALITY_INDEX_BIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_PERSONALITY_INDEX_MASK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_PERSONALITY_MINTTIME_BIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_PERSONALITY_MINTTIME_MASK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_PERSONALITY_PADDING_BIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_PERSONALITY_SKILL_BIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_PERSONALITY_SKILL_MASK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_RARITY_BIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_RARITY_MASK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_SKIN_BIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARD_SKIN_MASK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFT_SIGN",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFT_SIGN_BIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_skin",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_rarity",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_comment",
          "type": "bytes32"
        }
      ],
      "name": "addCardType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cardId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_skill",
          "type": "uint32"
        }
      ],
      "name": "addSkillType",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cardTypes",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "skin",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "rarity",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "comment",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_skill",
          "type": "uint32"
        }
      ],
      "name": "containSkill",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCardTypesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cardId",
          "type": "uint256"
        }
      ],
      "name": "getIdentityFromCardId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSkillLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenIdentity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenIndex",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenMintTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenPersonality",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenRarity",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenSkill",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenSkin",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a3fc2dbdcf8d4fc456ab5097448a37cc46fb86236538eb98b7dc3056a176071",
  "receipt": {
    "to": null,
    "from": "0x71b29689f42a50Ae234f1415C9158Adc458c2348",
    "contractAddress": "0x1E9c6F7baF1Ed882B5276568879b44Dc585ef2d5",
    "transactionIndex": 2,
    "gasUsed": "688393",
    "logsBloom": "0x
    "blockHash": "0xf3b277b8b3e5b3ac2c22a77c0c70984e501db03423e95c928c60a6fd3c13e9d7",
    "transactionHash": "0x9a3fc2dbdcf8d4fc456ab5097448a37cc46fb86236538eb98b7dc3056a176071",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 10038272,
        "transactionHash": "0x9a3fc2dbdcf8d4fc456ab5097448a37cc46fb86236538eb98b7dc3056a176071",
        "address": "0x1E9c6F7baF1Ed882B5276568879b44Dc585ef2d5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000071b29689f42a50ae234f1415c9158adc458c2348"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xf3b277b8b3e5b3ac2c22a77c0c70984e501db03423e95c928c60a6fd3c13e9d7"
      }
    ],
    "blockNumber": 10038272,
    "cumulativeGasUsed": "2410002",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "24858961e066203ddb505a514341a5fd",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CARD_IDENTITY_BIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_IDENTITY_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_IDENTITY_PADDING_BIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_PERSONALITY_INDEX_BIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_PERSONALITY_INDEX_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_PERSONALITY_MINTTIME_BIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_PERSONALITY_MINTTIME_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_PERSONALITY_PADDING_BIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_PERSONALITY_SKILL_BIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_PERSONALITY_SKILL_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_RARITY_BIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_RARITY_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_SKIN_BIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARD_SKIN_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_SIGN\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_SIGN_BIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_skin\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_rarity\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_comment\",\"type\":\"bytes32\"}],\"name\":\"addCardType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_skill\",\"type\":\"uint32\"}],\"name\":\"addSkillType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardTypes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"skin\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rarity\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"comment\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_skill\",\"type\":\"uint32\"}],\"name\":\"containSkill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCardTypesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getIdentityFromCardId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSkillLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenIdentity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenMintTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenPersonality\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenRarity\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenSkill\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenSkin\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CardSpec.sol\":\"CardSpec\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/CardSpec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\n\\ncontract CardSpec is Ownable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    //             identity           |           personality\\n    // nftSign  skin  rarity  padding |   padding  skill   mintTime  index\\n    // 16        16     16      40    |     32       32       40       64\\n    // 240       224    208     168   |     136      104      64       0\\n\\n    // nft sign id\\n    uint16 public constant NFT_SIGN = 0x8000;\\n\\n    uint8 public constant NFT_SIGN_BIT = 240;\\n    uint8 public constant CARD_SKIN_BIT = 224;\\n    uint8 public constant CARD_RARITY_BIT = 208;\\n    uint8 public constant CARD_IDENTITY_BIT = 168;\\n    uint8 public constant CARD_IDENTITY_PADDING_BIT = 168;\\n    uint8 public constant CARD_PERSONALITY_PADDING_BIT = 136;\\n    uint8 public constant CARD_PERSONALITY_SKILL_BIT = 104;\\n    uint8 public constant CARD_PERSONALITY_MINTTIME_BIT = 64;\\n    uint8 public constant CARD_PERSONALITY_INDEX_BIT = 0;\\n\\n    uint256 public constant CARD_IDENTITY_MASK = uint256(~uint88(0)) << CARD_IDENTITY_BIT;\\n    uint256 public constant CARD_SKIN_MASK = uint256(~uint16(0)) << CARD_SKIN_BIT;\\n    uint256 public constant CARD_RARITY_MASK = uint256(~uint16(0)) << CARD_RARITY_BIT;\\n    uint256 public constant CARD_PERSONALITY_SKILL_MASK = uint256(~uint32(0)) << CARD_PERSONALITY_SKILL_BIT;\\n\\n    uint256 public constant CARD_PERSONALITY_MINTTIME_MASK = uint256(~uint40(0)) << CARD_PERSONALITY_MINTTIME_BIT;\\n    uint256 public constant CARD_PERSONALITY_INDEX_MASK = uint256(~uint64(0)) << CARD_PERSONALITY_INDEX_BIT;\\n\\n    struct CardType {\\n        uint16 skin;\\n        uint16 rarity;\\n        bytes32 comment;\\n    }\\n\\n    // card type array\\n    CardType[] public cardTypes;\\n    EnumerableSet.UintSet private skillTypes;\\n\\n    constructor() {\\n        cardTypes.push();\\n    }\\n\\n    function addCardType(\\n        uint16 _skin,\\n        uint16 _rarity,\\n        bytes32 _comment\\n    ) external onlyOwner returns (uint256 cardId) {\\n        cardId = cardTypes.length;\\n        CardType storage cardType = cardTypes.push();\\n        cardType.skin = _skin;\\n        cardType.rarity = _rarity;\\n        cardType.comment = _comment;\\n    }\\n\\n    function addSkillType(uint32 _skill) external onlyOwner returns (bool) {\\n        return skillTypes.add(_skill);\\n    }\\n\\n    function getCardTypesLength() external view returns (uint256) {\\n        return cardTypes.length;\\n    }\\n\\n    function getTokenSkin(uint256 tokenId) public pure returns (uint16) {\\n        return uint16(tokenId >> CARD_SKIN_BIT);\\n    }\\n\\n    function getTokenRarity(uint256 tokenId) public pure returns (uint16) {\\n        return uint16(tokenId >> CARD_RARITY_BIT);\\n    }\\n\\n    // identity for token id uri\\n    function getTokenIdentity(uint256 tokenId) public pure returns (uint256) {\\n        return tokenId >> CARD_IDENTITY_BIT;\\n    }\\n\\n    function getTokenSkill(uint256 tokenId) public pure returns (uint32) {\\n        return uint32(tokenId >> CARD_PERSONALITY_SKILL_BIT);\\n    }\\n\\n    function getTokenMintTime(uint256 tokenId) public pure returns (uint64) {\\n        return uint64(uint40(tokenId >> CARD_PERSONALITY_MINTTIME_BIT));\\n    }\\n\\n    function getTokenIndex(uint256 tokenId) public pure returns (uint64) {\\n        return uint64(tokenId);\\n    }\\n\\n    function getTokenPersonality(uint256 tokenId) public pure returns (uint256) {\\n        return uint256(uint136(tokenId));\\n    }\\n\\n    function getSkillLength() public view returns (uint256) {\\n        return skillTypes.length();\\n    }\\n\\n    function containSkill(uint32 _skill) public view returns (bool) {\\n        return skillTypes.contains(_skill);\\n    }\\n\\n    function getIdentityFromCardId(uint256 _cardId) public view returns (uint256) {\\n        CardType storage card = cardTypes[_cardId];\\n        return\\n            ((uint256(NFT_SIGN) << NFT_SIGN_BIT) | (uint256(card.skin) << CARD_SKIN_BIT) | (uint256(card.rarity) << CARD_RARITY_BIT)) >>\\n            CARD_IDENTITY_BIT;\\n    }\\n}\\n\",\"keccak256\":\"0x7716f4c4712922517bbb2ee1a354cb5308819d30802cb0cb43153f19f1978346\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061001b610075565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001805481018155600052610079565b3390565b610aad806100886000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80637272bf7d1161011a578063a734fc17116100ad578063db11b4011161007c578063db11b40114610370578063e10f024d1461048e578063e876190214610496578063eaa6c0da1461049e578063f2fde38b146104e0576101fb565b8063a734fc1714610429578063b00feffd14610431578063b5924acb14610454578063b805223714610471576101fb565b8063a208ab7c116100e9578063a208ab7c14610409578063a45f727a14610411578063a54f8fae14610419578063a6ff0ec014610421576101fb565b80637272bf7d1461038a5780638da5cb5b146103a757806397027d94146103cb5780639ac20477146103d3576101fb565b80633dc1a6bc116101925780635e1e2f27116101615780635e1e2f27146103685780635e526eb114610370578063706e559e14610378578063715018a614610380576101fb565b80633dc1a6bc146102db5780634935b48b146102e3578063555ec78b1461031457806358704d8914610331576101fb565b80631612f56e116101ce5780631612f56e14610273578063349511cc1461029157806334ab8b05146102995780633a663c80146102a1576101fb565b806301d266d414610200578063062e7ac51461022f5780630ab12ded146102375780630c198fca14610256575b600080fd5b61021d6004803603602081101561021657600080fd5b5035610506565b60408051918252519081900360200190f35b61021d61051c565b61023f610527565b6040805161ffff9092168252519081900360200190f35b61023f6004803603602081101561026c57600080fd5b503561052d565b61027b610533565b6040805160ff9092168252519081900360200190f35b61027b610538565b61021d61053d565b6102be600480360360208110156102b757600080fd5b5035610549565b6040805167ffffffffffffffff9092168252519081900360200190f35b61021d61054c565b61021d600480360360608110156102f957600080fd5b5061ffff81358116916020810135909116906040013561055d565b61023f6004803603602081101561032a57600080fd5b503561064a565b6103546004803603602081101561034757600080fd5b503563ffffffff16610650565b604080519115158252519081900360200190f35b61021d6106ce565b61027b6106d7565b61027b6106dc565b6103886106e1565b005b61021d600480360360208110156103a057600080fd5b503561078d565b6103af610793565b604080516001600160a01b039092168252519081900360200190f35b61021d6107a2565b6103f0600480360360208110156103e957600080fd5b50356107ae565b6040805163ffffffff9092168252519081900360200190f35b61021d6107b4565b61021d6107ba565b61027b6107cb565b61027b6107d0565b61027b6107d5565b6103546004803603602081101561044757600080fd5b503563ffffffff166107da565b61021d6004803603602081101561046a57600080fd5b50356107f0565b6102be6004803603602081101561048757600080fd5b5035610842565b61027b61084f565b61021d610854565b6104bb600480360360208110156104b457600080fd5b503561085d565b6040805161ffff94851681529290931660208301528183015290519081900360600190f35b610388600480360360208110156104f657600080fd5b50356001600160a01b031661089b565b70ffffffffffffffffffffffffffffffffff1690565b63ffffffff60681b81565b61800081565b60e01c90565b604081565b60d081565b6001600160a81b031981565b90565b6000610558600261099d565b905090565b60006105676109a8565b6001600160a01b0316610578610793565b6001600160a01b0316146105c1576040805162461bcd60e51b81526020600482018190526024820152600080516020610a58833981519152604482015290519081900360640190fd5b50600180548082018255600091909152600281027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68101805461ffff958616620100000263ffff0000199790961661ffff199091161795909516939093179093557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf79091015590565b60d01c90565b600061065a6109a8565b6001600160a01b031661066b610793565b6001600160a01b0316146106b4576040805162461bcd60e51b81526020600482018190526024820152600080516020610a58833981519152604482015290519081900360640190fd5b6106c8600263ffffffff808516906109ac16565b92915050565b61ffff60e01b81565b60a881565b606881565b6106e96109a8565b6001600160a01b03166106fa610793565b6001600160a01b031614610743576040805162461bcd60e51b81526020600482018190526024820152600080516020610a58833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60a81c90565b6000546001600160a01b031690565b67ffffffffffffffff81565b60681c90565b60015490565b6cffffffffff000000000000000081565b60e081565b608881565b600081565b60006106c8600263ffffffff808516906109bf16565b6000806001838154811061080057fe5b6000918252602090912060029091020154600160ff1b62010000820460d01b61ffff60d01b1660e09290921b61ffff60e01b16919091171760a81c9392505050565b60401c64ffffffffff1690565b60f081565b61ffff60d01b81565b6001818154811061086d57600080fd5b60009182526020909120600290910201805460019091015461ffff8083169350620100009092049091169083565b6108a36109a8565b6001600160a01b03166108b4610793565b6001600160a01b0316146108fd576040805162461bcd60e51b81526020600482018190526024820152600080516020610a58833981519152604482015290519081900360640190fd5b6001600160a01b0381166109425760405162461bcd60e51b8152600401808060200182810382526026815260200180610a326026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006106c8826109cb565b3390565b60006109b883836109cf565b9392505050565b60006109b88383610a19565b5490565b60006109db8383610a19565b610a11575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106c8565b5060006106c8565b6000908152600191909101602052604090205415159056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b939bb4ae074f77b57265f405a0247d03a6033578874dfe5b4f05c5cc65e627d64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80637272bf7d1161011a578063a734fc17116100ad578063db11b4011161007c578063db11b40114610370578063e10f024d1461048e578063e876190214610496578063eaa6c0da1461049e578063f2fde38b146104e0576101fb565b8063a734fc1714610429578063b00feffd14610431578063b5924acb14610454578063b805223714610471576101fb565b8063a208ab7c116100e9578063a208ab7c14610409578063a45f727a14610411578063a54f8fae14610419578063a6ff0ec014610421576101fb565b80637272bf7d1461038a5780638da5cb5b146103a757806397027d94146103cb5780639ac20477146103d3576101fb565b80633dc1a6bc116101925780635e1e2f27116101615780635e1e2f27146103685780635e526eb114610370578063706e559e14610378578063715018a614610380576101fb565b80633dc1a6bc146102db5780634935b48b146102e3578063555ec78b1461031457806358704d8914610331576101fb565b80631612f56e116101ce5780631612f56e14610273578063349511cc1461029157806334ab8b05146102995780633a663c80146102a1576101fb565b806301d266d414610200578063062e7ac51461022f5780630ab12ded146102375780630c198fca14610256575b600080fd5b61021d6004803603602081101561021657600080fd5b5035610506565b60408051918252519081900360200190f35b61021d61051c565b61023f610527565b6040805161ffff9092168252519081900360200190f35b61023f6004803603602081101561026c57600080fd5b503561052d565b61027b610533565b6040805160ff9092168252519081900360200190f35b61027b610538565b61021d61053d565b6102be600480360360208110156102b757600080fd5b5035610549565b6040805167ffffffffffffffff9092168252519081900360200190f35b61021d61054c565b61021d600480360360608110156102f957600080fd5b5061ffff81358116916020810135909116906040013561055d565b61023f6004803603602081101561032a57600080fd5b503561064a565b6103546004803603602081101561034757600080fd5b503563ffffffff16610650565b604080519115158252519081900360200190f35b61021d6106ce565b61027b6106d7565b61027b6106dc565b6103886106e1565b005b61021d600480360360208110156103a057600080fd5b503561078d565b6103af610793565b604080516001600160a01b039092168252519081900360200190f35b61021d6107a2565b6103f0600480360360208110156103e957600080fd5b50356107ae565b6040805163ffffffff9092168252519081900360200190f35b61021d6107b4565b61021d6107ba565b61027b6107cb565b61027b6107d0565b61027b6107d5565b6103546004803603602081101561044757600080fd5b503563ffffffff166107da565b61021d6004803603602081101561046a57600080fd5b50356107f0565b6102be6004803603602081101561048757600080fd5b5035610842565b61027b61084f565b61021d610854565b6104bb600480360360208110156104b457600080fd5b503561085d565b6040805161ffff94851681529290931660208301528183015290519081900360600190f35b610388600480360360208110156104f657600080fd5b50356001600160a01b031661089b565b70ffffffffffffffffffffffffffffffffff1690565b63ffffffff60681b81565b61800081565b60e01c90565b604081565b60d081565b6001600160a81b031981565b90565b6000610558600261099d565b905090565b60006105676109a8565b6001600160a01b0316610578610793565b6001600160a01b0316146105c1576040805162461bcd60e51b81526020600482018190526024820152600080516020610a58833981519152604482015290519081900360640190fd5b50600180548082018255600091909152600281027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68101805461ffff958616620100000263ffff0000199790961661ffff199091161795909516939093179093557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf79091015590565b60d01c90565b600061065a6109a8565b6001600160a01b031661066b610793565b6001600160a01b0316146106b4576040805162461bcd60e51b81526020600482018190526024820152600080516020610a58833981519152604482015290519081900360640190fd5b6106c8600263ffffffff808516906109ac16565b92915050565b61ffff60e01b81565b60a881565b606881565b6106e96109a8565b6001600160a01b03166106fa610793565b6001600160a01b031614610743576040805162461bcd60e51b81526020600482018190526024820152600080516020610a58833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60a81c90565b6000546001600160a01b031690565b67ffffffffffffffff81565b60681c90565b60015490565b6cffffffffff000000000000000081565b60e081565b608881565b600081565b60006106c8600263ffffffff808516906109bf16565b6000806001838154811061080057fe5b6000918252602090912060029091020154600160ff1b62010000820460d01b61ffff60d01b1660e09290921b61ffff60e01b16919091171760a81c9392505050565b60401c64ffffffffff1690565b60f081565b61ffff60d01b81565b6001818154811061086d57600080fd5b60009182526020909120600290910201805460019091015461ffff8083169350620100009092049091169083565b6108a36109a8565b6001600160a01b03166108b4610793565b6001600160a01b0316146108fd576040805162461bcd60e51b81526020600482018190526024820152600080516020610a58833981519152604482015290519081900360640190fd5b6001600160a01b0381166109425760405162461bcd60e51b8152600401808060200182810382526026815260200180610a326026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006106c8826109cb565b3390565b60006109b883836109cf565b9392505050565b60006109b88383610a19565b5490565b60006109db8383610a19565b610a11575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106c8565b5060006106c8565b6000908152600191909101602052604090205415159056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b939bb4ae074f77b57265f405a0247d03a6033578874dfe5b4f05c5cc65e627d64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 290,
        "contract": "contracts/CardSpec.sol:CardSpec",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4633,
        "contract": "contracts/CardSpec.sol:CardSpec",
        "label": "cardTypes",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(CardType)4630_storage)dyn_storage"
      },
      {
        "astId": 4635,
        "contract": "contracts/CardSpec.sol:CardSpec",
        "label": "skillTypes",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintSet)4238_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(CardType)4630_storage)dyn_storage": {
        "base": "t_struct(CardType)4630_storage",
        "encoding": "dynamic_array",
        "label": "struct CardSpec.CardType[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CardType)4630_storage": {
        "encoding": "inplace",
        "label": "struct CardSpec.CardType",
        "members": [
          {
            "astId": 4625,
            "contract": "contracts/CardSpec.sol:CardSpec",
            "label": "skin",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4627,
            "contract": "contracts/CardSpec.sol:CardSpec",
            "label": "rarity",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4629,
            "contract": "contracts/CardSpec.sol:CardSpec",
            "label": "comment",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3852_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3847,
            "contract": "contracts/CardSpec.sol:CardSpec",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3851,
            "contract": "contracts/CardSpec.sol:CardSpec",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)4238_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 4237,
            "contract": "contracts/CardSpec.sol:CardSpec",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3852_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}