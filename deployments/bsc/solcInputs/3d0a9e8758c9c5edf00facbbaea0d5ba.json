{
  "language": "Solidity",
  "sources": {
    "contracts/CardSpec.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\n\ncontract CardSpec is Ownable {\n    using EnumerableSet for EnumerableSet.UintSet;\n    //             identity           |           personality\n    // nftSign  skin  rarity  padding |   padding  skill   mintTime  index\n    // 16        16     16      40    |     32       32       40       64\n    // 240       224    208     168   |     136      104      64       0\n\n    // nft sign id\n    uint16 public constant NFT_SIGN = 0x8000;\n\n    uint8 public constant NFT_SIGN_BIT = 240;\n    uint8 public constant CARD_SKIN_BIT = 224;\n    uint8 public constant CARD_RARITY_BIT = 208;\n    uint8 public constant CARD_IDENTITY_BIT = 168;\n    uint8 public constant CARD_IDENTITY_PADDING_BIT = 168;\n    uint8 public constant CARD_PERSONALITY_PADDING_BIT = 136;\n    uint8 public constant CARD_PERSONALITY_SKILL_BIT = 104;\n    uint8 public constant CARD_PERSONALITY_MINTTIME_BIT = 64;\n    uint8 public constant CARD_PERSONALITY_INDEX_BIT = 0;\n\n    uint256 public constant CARD_IDENTITY_MASK = uint256(~uint88(0)) << CARD_IDENTITY_BIT;\n    uint256 public constant CARD_SKIN_MASK = uint256(~uint16(0)) << CARD_SKIN_BIT;\n    uint256 public constant CARD_RARITY_MASK = uint256(~uint16(0)) << CARD_RARITY_BIT;\n    uint256 public constant CARD_PERSONALITY_SKILL_MASK = uint256(~uint32(0)) << CARD_PERSONALITY_SKILL_BIT;\n\n    uint256 public constant CARD_PERSONALITY_MINTTIME_MASK = uint256(~uint40(0)) << CARD_PERSONALITY_MINTTIME_BIT;\n    uint256 public constant CARD_PERSONALITY_INDEX_MASK = uint256(~uint64(0)) << CARD_PERSONALITY_INDEX_BIT;\n\n    struct CardType {\n        uint16 skin;\n        uint16 rarity;\n        bytes32 comment;\n    }\n\n    // card type array\n    CardType[] public cardTypes;\n    EnumerableSet.UintSet private skillTypes;\n\n    function addCardType(\n        uint16 _skin,\n        uint16 _rarity,\n        bytes32 _comment\n    ) external onlyOwner returns (uint256 cardId) {\n        cardId = cardTypes.length;\n        CardType storage cardType = cardTypes.push();\n        cardType.skin = _skin;\n        cardType.rarity = _rarity;\n        cardType.comment = _comment;\n    }\n\n    function addSkillType(uint32 _skill) external onlyOwner returns (bool) {\n        return skillTypes.add(_skill);\n    }\n\n    function getCardTypesLength() external view returns (uint256) {\n        return cardTypes.length;\n    }\n\n    function getTokenSkin(uint256 tokenId) public pure returns (uint16) {\n        return uint16(tokenId >> CARD_SKIN_BIT);\n    }\n\n    function getTokenRarity(uint256 tokenId) public pure returns (uint16) {\n        return uint16(tokenId >> CARD_RARITY_BIT);\n    }\n\n    // identity for token id uri\n    function getTokenIdentity(uint256 tokenId) public pure returns (uint256) {\n        return tokenId >> CARD_IDENTITY_BIT;\n    }\n\n    function getTokenSkill(uint256 tokenId) public pure returns (uint32) {\n        return uint32(tokenId >> CARD_PERSONALITY_SKILL_BIT);\n    }\n\n    function getTokenMintTime(uint256 tokenId) public pure returns (uint64) {\n        return uint64(uint40(tokenId >> CARD_PERSONALITY_MINTTIME_BIT));\n    }\n\n    function getTokenIndex(uint256 tokenId) public pure returns (uint64) {\n        return uint64(tokenId);\n    }\n\n    function getTokenPersonality(uint256 tokenId) public pure returns (uint256) {\n        return uint256(uint136(tokenId));\n    }\n\n    function getSkillLength() public view returns (uint256) {\n        return skillTypes.length();\n    }\n\n    function containSkill(uint32 _skill) public view returns (bool) {\n        return skillTypes.contains(_skill);\n    }\n\n    function getIdentityFromCardId(uint256 _cardId) public view returns (uint256) {\n        CardType storage card = cardTypes[_cardId];\n        return\n            ((uint256(NFT_SIGN) << NFT_SIGN_BIT) | (uint256(card.skin) << CARD_SKIN_BIT) | (uint256(card.rarity) << CARD_RARITY_BIT)) >>\n            CARD_IDENTITY_BIT;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/SynthesisMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\npragma experimental ABIEncoderV2;\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/Pausable.sol';\n\nimport './ERC721Ex.sol';\nimport './CardSpec.sol';\nimport './libraries/EnumerableMap.sol';\nimport './libraries/TransferHelper.sol';\n\ncontract SynthesisMarket is Ownable, Pausable {\n    using Strings for uint256;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMapper for EnumerableMapper.UintToUintMap;\n\n    struct CardAsset {\n        address owner;\n        bool isRedemption;\n        uint256 convertTokenId;\n        // identity -> tokenId\n        EnumerableMapper.UintToUintMap lockTokenIds;\n    }\n\n    address public devaddr;\n    // card spec\n    CardSpec public spec;\n    // synthesis payment token\n    IERC20 public cto;\n    // synthesis payment unit price\n    uint256 public unitPrice;\n    // synthesis cardId\n    uint256 public synthesisCardId;\n    // erc721 token\n    ERC721Ex public nft;\n    // lock asset info\n    CardAsset[] private assets;\n\n    // identity -> cardId\n    // list for synthesis cardIds\n    EnumerableMapper.UintToUintMap private swapCardList;\n\n    mapping(address => EnumerableSet.UintSet) private assetsIndex;\n\n    constructor(\n        address _spec,\n        address _token,\n        address _nft,\n        address _devaddr\n    ) {\n        spec = CardSpec(_spec);\n        cto = IERC20(_token);\n        nft = ERC721Ex(_nft);\n        devaddr = _devaddr;\n    }\n\n    function addSwapCardList(uint256[] memory cardIds) public onlyOwner {\n        for (uint256 i; i < cardIds.length; ++i) {\n            require(cardIds[i] < spec.getCardTypesLength(), 'card id out of range');\n            swapCardList.set(spec.getIdentityFromCardId(cardIds[i]), cardIds[i]);\n        }\n    }\n\n    function removeSwapCardList(uint256[] memory cardIds) public onlyOwner {\n        for (uint256 i; i < cardIds.length; ++i) {\n            require(cardIds[i] < spec.getCardTypesLength(), 'card id out of range');\n            swapCardList.remove(spec.getIdentityFromCardId(cardIds[i]));\n        }\n    }\n\n    function getSwapCardListLength() public view returns (uint256) {\n        return swapCardList.length();\n    }\n\n    function containSwapCardList(uint256 cardId) public view returns (bool) {\n        if (cardId >= spec.getCardTypesLength()) {\n            return false;\n        }\n        return swapCardList.contains(spec.getIdentityFromCardId(cardId));\n    }\n\n    function getSwapCardList() public view returns (uint256[] memory cardIds) {\n        cardIds = new uint256[](swapCardList.length());\n        for (uint256 i; i < swapCardList.length(); ++i) {\n            (, cardIds[i]) = swapCardList.at(i);\n        }\n    }\n\n    function setUnitPrice(uint256 price) public onlyOwner {\n        unitPrice = price;\n    }\n\n    function setSynthesisCardId(uint256 cardId) external onlyOwner {\n        require(cardId < spec.getCardTypesLength(), 'card id out of range');\n        synthesisCardId = cardId;\n    }\n\n    // synthesis card\n    function synthesis(uint256[] calldata tokeIds) external whenNotPaused returns (uint256 tokenId) {\n        require(tokeIds.length == swapCardList.length(), 'length mismatch');\n\n        // pay some token to dev\n        TransferHelper.safeTransferFrom(address(cto), msg.sender, devaddr, unitPrice);\n\n        assetsIndex[msg.sender].add(assets.length);\n        CardAsset storage asset = assets.push();\n        asset.owner = msg.sender;\n\n        for (uint256 i; i < tokeIds.length; ++i) {\n            uint256 identity = spec.getTokenIdentity(tokeIds[i]);\n            // check token repetition\n            require(!asset.lockTokenIds.contains(identity), 'identity has been exist');\n            // check token identity not in the list\n            require(swapCardList.contains(identity), 'identity not in list');\n            asset.lockTokenIds.set(identity, tokeIds[i]);\n            nft.transferFrom(msg.sender, address(this), tokeIds[i]);\n        }\n        tokenId = mint(msg.sender, synthesisCardId);\n        asset.convertTokenId = tokenId;\n    }\n\n    // redemption card\n    function redemption(uint256 assetId) external {\n        CardAsset storage asset = assets[assetId];\n        require(!asset.isRedemption, 'asset has been redemption');\n        require(asset.owner == msg.sender, 'only asset owner');\n\n        // pay some token to dev\n        TransferHelper.safeTransferFrom(address(cto), msg.sender, devaddr, unitPrice);\n\n        nft.transferFrom(msg.sender, address(this), asset.convertTokenId);\n        nft.burn(asset.convertTokenId);\n\n        asset.isRedemption = true;\n        for (uint256 i; i < asset.lockTokenIds.length(); ++i) {\n            (, uint256 tokenId) = asset.lockTokenIds.at(i);\n            nft.transferFrom(address(this), msg.sender, tokenId);\n        }\n    }\n\n    function getAssetIdOfAddress(address from) external view returns (uint256[] memory list) {\n        list = new uint256[](assetsIndex[from].length());\n        for (uint256 i = 0; i < assetsIndex[from].length(); i++) {\n            list[i] = assetsIndex[from].at(i);\n        }\n    }\n\n    function getAssetInfo(uint256 assetId)\n        external\n        view\n        returns (\n            address owner,\n            bool isRedemption,\n            uint256 convertTokenId,\n            uint256[] memory lockTokenIds\n        )\n    {\n        CardAsset storage asset = assets[assetId];\n        lockTokenIds = new uint256[](asset.lockTokenIds.length());\n        for (uint256 i = 0; i < asset.lockTokenIds.length(); i++) {\n            (, lockTokenIds[i]) = asset.lockTokenIds.at(i);\n        }\n        return (asset.owner, asset.isRedemption, asset.convertTokenId, lockTokenIds);\n    }\n\n    function pause() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    function unpause() external onlyOwner whenPaused {\n        _unpause();\n    }\n\n    function mint(address _to, uint256 _synthesisCardId) internal returns (uint256 tokenId) {\n        (uint16 skin, uint16 rarity, ) = spec.cardTypes(_synthesisCardId);\n        uint256 tokenPreId =\n            (uint256(spec.NFT_SIGN()) << spec.NFT_SIGN_BIT()) |\n                (uint256(skin) << spec.CARD_SKIN_BIT()) |\n                (uint256(rarity) << spec.CARD_RARITY_BIT());\n        tokenId = nft.mint(_to, tokenPreId);\n        nft.setTokenURI(tokenId, uint256(tokenId >> spec.CARD_IDENTITY_PADDING_BIT()).toString());\n    }\n\n    function dev(address _devaddr) public onlyOwner {\n        devaddr = _devaddr;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/ERC721Ex.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\nimport './CardSpec.sol';\nimport '@openzeppelin/contracts/access/AccessControl.sol';\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/ERC721Pausable.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\ncontract ERC721Ex is CardSpec, ERC721Pausable, AccessControl {\n    using Strings for uint256;\n    bytes32 public constant UPDATE_TOKEN_URI_ROLE = keccak256('UPDATE_TOKEN_URI_ROLE');\n    bytes32 public constant MINT_ROLE = keccak256('MINT_ROLE');\n    bytes32 public constant PAUSED_ROLE = keccak256('PAUSED_ROLE');\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n\n    uint256 public tokenIndex;\n\n    constructor(address _dev) ERC721('non-fungible Cartoon Token', 'NCTO') {\n        _setupRole(ADMIN_ROLE, _dev);\n        _setRoleAdmin(UPDATE_TOKEN_URI_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(MINT_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(PAUSED_ROLE, ADMIN_ROLE);\n    }\n\n    // safe mint to someone\n    function safeMint(\n        address to,\n        uint256 tokenPreId,\n        bytes memory _data\n    ) public returns (uint256 tokenId) {\n        require(hasRole(MINT_ROLE, _msgSender()), 'Must have mint role');\n        tokenId = tokenPreId | (uint256(uint40(block.timestamp)) << 64) | uint64(++tokenIndex);\n        _safeMint(to, tokenId, _data);\n    }\n\n    // mint to someone\n    function mint(address to, uint256 tokenPreId) public returns (uint256 tokenId) {\n        require(hasRole(MINT_ROLE, _msgSender()), 'Must have mint role');\n        tokenId = tokenPreId | (uint256(uint40(block.timestamp)) << 64) | uint64(++tokenIndex);\n        _mint(to, tokenId);\n    }\n\n    // burn token\n    function burn(uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), 'caller is not owner nor approved');\n        _burn(tokenId);\n    }\n\n    function setBaseURI(string memory baseURI) public {\n        require(hasRole(UPDATE_TOKEN_URI_ROLE, _msgSender()), 'Must have update token uri role');\n        _setBaseURI(baseURI);\n    }\n\n    function setTokenURI(uint256 tokenId, string memory tokenURI) public {\n        require(hasRole(UPDATE_TOKEN_URI_ROLE, _msgSender()), 'Must have update token uri role');\n        _setTokenURI(tokenId, tokenURI);\n    }\n\n    function pause() public whenNotPaused {\n        require(hasRole(PAUSED_ROLE, _msgSender()), 'Must have pause role');\n        _pause();\n    }\n\n    function unpause() public whenPaused {\n        require(hasRole(PAUSED_ROLE, _msgSender()), 'Must have pause role');\n        _unpause();\n    }\n\n    function approveBulk(address to, uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\n            approve(to, tokenIds[i]);\n        }\n    }\n\n    function getApprovedBulk(uint256[] memory tokenIds) public view returns (address[] memory) {\n        address[] memory tokenApprovals = new address[](tokenIds.length);\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\n            tokenApprovals[i] = getApproved(tokenIds[i]);\n        }\n        return tokenApprovals;\n    }\n}\n"
    },
    "contracts/libraries/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\n/**\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableMap.sol\n */\nlibrary EnumerableMapper {\n    struct MapEntry {\n        uint256 _key;\n        uint256 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping(uint256 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(\n        Map storage map,\n        uint256 key,\n        uint256 value\n    ) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) {\n            // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({_key: key, _value: value}));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, uint256 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) {\n            // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, uint256 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Map storage map, uint256 index) private view returns (uint256, uint256) {\n        require(map._entries.length > index, 'EnumerableMap: index out of bounds');\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, uint256 key) private view returns (uint256) {\n        return _get(map, key, 'EnumerableMap: nonexistent key');\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     */\n    function _get(\n        Map storage map,\n        uint256 key,\n        string memory errorMessage\n    ) private view returns (uint256) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToUintMap storage map,\n        uint256 key,\n        uint256 value\n    ) internal returns (bool) {\n        return _set(map._inner, key, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n        return _at(map._inner, index);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return _get(map._inner, key);\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     */\n    function get(\n        UintToUintMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return _get(map._inner, key, errorMessage);\n    }\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./IERC721Enumerable.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/EnumerableSet.sol\";\nimport \"../../utils/EnumerableMap.sol\";\nimport \"../../utils/Strings.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping (uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view virtual returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId); // internal owner\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721Receiver(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./ERC721.sol\";\nimport \"../../utils/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/timeLock/TimeLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '../libraries/TransferHelper.sol';\n\ncontract TimeLock {\n    using SafeMath for uint256;\n\n    IERC20 public token;\n    uint256 public constant PERIOD = 91 days;\n    uint256 public constant CYCLE_TIMES = 8; // 2 years\n    uint256 public fixedQuantity; // Quarter rewards are fixed\n    uint256 public startTime;\n    uint256 public delay;\n    uint256 public cycle; // cycle already received\n    uint256 public hasReward; // Rewards already withdrawn\n    address public beneficiary;\n    string public introduce;\n\n    event WithDraw(address indexed operator, address indexed to, uint256 amount);\n\n    constructor(\n        address _beneficiary,\n        address _token,\n        uint256 _fixedQuantity,\n        uint256 _startTime,\n        uint256 _delay,\n        string memory _introduce\n    ) {\n        require(_beneficiary != address(0) && _token != address(0), 'TimeLock: zero address');\n        require(_fixedQuantity > 0, 'TimeLock: fixedQuantity is zero');\n        beneficiary = _beneficiary;\n        token = IERC20(_token);\n        fixedQuantity = _fixedQuantity;\n        delay = _delay;\n        startTime = _startTime.add(_delay);\n        introduce = _introduce;\n    }\n\n    function getBalance() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    function getReward() public view returns (uint256) {\n        // Has ended or not started\n        if (cycle >= CYCLE_TIMES || block.timestamp <= startTime) {\n            return 0;\n        }\n        uint256 pCycle = (block.timestamp.sub(startTime)).div(PERIOD);\n        if (pCycle >= CYCLE_TIMES) {\n            return token.balanceOf(address(this));\n        }\n        return pCycle.sub(cycle).mul(fixedQuantity);\n    }\n\n    function withDraw() external {\n        uint256 reward = getReward();\n        require(reward > 0, 'TimeLock: no reward');\n        uint256 pCycle = (block.timestamp.sub(startTime)).div(PERIOD);\n        cycle = pCycle >= CYCLE_TIMES ? CYCLE_TIMES : pCycle;\n        hasReward = hasReward.add(reward);\n        TransferHelper.safeTransfer(address(token), beneficiary, reward);\n        emit WithDraw(msg.sender, beneficiary, reward);\n    }\n\n    // Update beneficiary address by the previous beneficiary.\n    function setBeneficiary(address _newBeneficiary) public {\n        require(msg.sender == beneficiary, 'TimeLock: Not beneficiary');\n        beneficiary = _newBeneficiary;\n    }\n}\n"
    },
    "contracts/SwapMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\npragma experimental ABIEncoderV2;\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/Pausable.sol';\n\nimport './ERC721Ex.sol';\nimport './CardSpec.sol';\nimport './libraries/EnumerableMap.sol';\nimport './libraries/TransferHelper.sol';\n\ncontract SwapMarket is Ownable, Pausable {\n    using Strings for uint256;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMapper for EnumerableMapper.UintToUintMap;\n\n    address public devaddr;\n    // card spec\n    CardSpec public spec;\n    // synthesis payment token\n    IERC20 public cto;\n    // synthesis payment unit price\n    uint256 public unitPrice;\n    // erc721 token\n    ERC721Ex public nft;\n\n    uint256 private sellIndex;\n\n    // identity -> cardId\n    mapping(uint256 => EnumerableSet.UintSet) private identityToswapLists;\n\n    constructor(\n        address _spec,\n        address _token,\n        address _nft,\n        address _devaddr\n    ) {\n        spec = CardSpec(_spec);\n        cto = IERC20(_token);\n        nft = ERC721Ex(_nft);\n        devaddr = _devaddr;\n    }\n\n    function addSwapCardList(uint256 cardIdSrc, uint256[] memory cardIds) public onlyOwner {\n        for (uint256 i; i < cardIds.length; ++i) {\n            require(cardIds[i] < spec.getCardTypesLength(), 'card id out of range');\n            identityToswapLists[spec.getIdentityFromCardId(cardIdSrc)].add(cardIds[i]);\n        }\n    }\n\n    function removeSwapCardList(uint256 cardIdSrc, uint256[] memory cardIds) public onlyOwner {\n        for (uint256 i; i < cardIds.length; ++i) {\n            identityToswapLists[spec.getIdentityFromCardId(cardIdSrc)].remove(cardIds[i]);\n        }\n    }\n\n    function getSwapCardListLength(uint256 cardIdSrc) public view returns (uint256) {\n        return identityToswapLists[spec.getIdentityFromCardId(cardIdSrc)].length();\n    }\n\n    function containSwapCardList(uint256 cardIdSrc, uint256 cardId) public view returns (bool) {\n        return identityToswapLists[spec.getIdentityFromCardId(cardIdSrc)].contains(cardId);\n    }\n\n    function getSwapCardList(uint256 cardIdSrc) public view returns (uint256[] memory cardIds) {\n        uint256 identity = spec.getIdentityFromCardId(cardIdSrc);\n        uint256 length = identityToswapLists[identity].length();\n        cardIds = new uint256[](length);\n        for (uint256 i; i < length; ++i) {\n            cardIds[i] = identityToswapLists[identity].at(i);\n        }\n    }\n\n    function setUnitPrice(uint256 price) public onlyOwner {\n        unitPrice = price;\n    }\n\n    // synthesis card\n    function swap(uint256 tokeId) external whenNotPaused returns (uint256 tokenId) {\n        require(msg.sender == tx.origin, 'Shop::Human only');\n        uint256 identity = spec.getTokenIdentity(tokeId);\n        uint256 swapLength = identityToswapLists[identity].length();\n        require(swapLength > 0, 'length mismatch');\n\n        // pay some token to dev\n        TransferHelper.safeTransferFrom(address(cto), msg.sender, devaddr, unitPrice);\n\n        nft.burn(tokeId);\n\n        uint256 index = randomGen(++sellIndex, swapLength);\n        uint256 cardId = identityToswapLists[identity].at(index);\n\n        tokenId = mint(msg.sender, cardId);\n    }\n\n    function pause() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    function unpause() external onlyOwner whenPaused {\n        _unpause();\n    }\n\n    function randomGen(uint256 seed, uint256 max) internal view returns (uint256 randomNumber) {\n        return (uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), block.timestamp, msg.sender, block.difficulty, seed))) % max);\n    }\n\n    function mint(address _to, uint256 _synthesisCardId) internal returns (uint256 tokenId) {\n        (uint16 skin, uint16 rarity, ) = spec.cardTypes(_synthesisCardId);\n        uint256 tokenPreId =\n            (uint256(spec.NFT_SIGN()) << spec.NFT_SIGN_BIT()) |\n                (uint256(skin) << spec.CARD_SKIN_BIT()) |\n                (uint256(rarity) << spec.CARD_RARITY_BIT());\n        tokenId = nft.mint(_to, tokenPreId);\n        nft.setTokenURI(tokenId, uint256(tokenId >> spec.CARD_IDENTITY_PADDING_BIT()).toString());\n    }\n\n    function dev(address _devaddr) public onlyOwner {\n        devaddr = _devaddr;\n    }\n}\n"
    },
    "contracts/Shop.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\nimport '@openzeppelin/contracts/utils/Pausable.sol';\n\nimport './ERC721Ex.sol';\nimport './libraries/TransferHelper.sol';\n\n// this contract implementation IERC721Receiver, put on shelves must be use safeTransferFrom\ncontract Shop is IERC721Receiver, Ownable, Pausable {\n    using SafeMath for uint256;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    IERC20 public cartoonToken;\n    ERC721Ex public nCto;\n\n    uint256 public unitPrice;\n    address public devaddr;\n    address public waiter;\n\n    uint256 private sellIndex;\n    // shelves\n    EnumerableSet.UintSet private shelves;\n\n    constructor(\n        IERC20 _cartoonToken,\n        ERC721Ex _nCto,\n        address _devaddr\n    ) {\n        cartoonToken = _cartoonToken;\n        nCto = _nCto;\n        devaddr = _devaddr;\n    }\n\n    function setUnitPrice(uint256 _unitPrice) public onlyOwner {\n        unitPrice = _unitPrice;\n    }\n\n    function pullOffShelves(uint256 tokenId) external onlyOwner {\n        shelves.remove(tokenId);\n        nCto.burn(tokenId);\n    }\n\n    // lucky draw\n    function luckyDraw(address to) external whenNotPaused {\n        // must be human\n        require(msg.sender == tx.origin, 'Shop::Human only');\n\n        uint256 length = shelves.length();\n        require(length > 0, 'Shop::Goods sold out');\n\n        // pay token\n        TransferHelper.safeTransferFrom(address(cartoonToken), msg.sender, devaddr, unitPrice);\n\n        uint256 index = randomGen(++sellIndex, length);\n        uint256 tokenId = shelves.at(index);\n        nCto.transferFrom(address(this), to, tokenId);\n        shelves.remove(tokenId);\n    }\n\n    function randomGen(uint256 seed, uint256 max) internal view returns (uint256 randomNumber) {\n        return (uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), block.timestamp, msg.sender, block.difficulty, seed))) % max);\n    }\n\n    // receive token from the safe transferFrom\n    function onERC721Received(\n        address operator,\n        address,\n        uint256 tokenId,\n        bytes calldata\n    ) external override returns (bytes4) {\n        require(operator == waiter, 'Shop::Operator not waiter');\n        shelves.add(tokenId);\n        return 0x150b7a02;\n    }\n\n    function setWaiter(address _waiter) external onlyOwner {\n        waiter = _waiter;\n    }\n\n    function getShelvesLength() external view returns (uint256) {\n        return shelves.length();\n    }\n\n    function onShelves(uint256 _tokenId) external view returns (bool) {\n        return shelves.contains(_tokenId);\n    }\n\n    function dev(address _devaddr) external onlyOwner {\n        devaddr = _devaddr;\n    }\n\n    function pause() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    function unpause() external onlyOwner whenPaused {\n        _unpause();\n    }\n}\n"
    },
    "contracts/pool/coinWind/CoinWindPoolWithNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.4;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\nimport '@openzeppelin/contracts/utils/Pausable.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport '../../CartoonToken.sol';\nimport '../../CardSpec.sol';\nimport '../../ERC721Ex.sol';\nimport '../../interfaces/ICoinWind.sol';\nimport '../../interfaces/IWETH.sol';\nimport '../../libraries/TransferHelper.sol';\n\n// Have fun reading it. Hopefully it's bug-free. God bless.\ncontract CoinWindPoolWithNFT is Ownable, Pausable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        uint256 tokenId; // nft tokenId;\n    }\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 lpAmount; // current lp amount;\n        uint256 allocPoint; // How many allocation points assigned to this pool. CTOs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that CTOs distribution occurs.\n        uint256 accCtoPerShare; // Accumulated CTOs per share, times 1e12. See below.\n        uint256 tokenIdentity;\n    }\n\n    address public devaddr;\n    // card spec\n    CardSpec public cardSpec;\n    // erc721 token\n    ERC721Ex public nCto;\n    // swap token\n    IERC20 public swapToken;\n    // weth\n    IWETH public WETH;\n    // invest aggregator\n    ICoinWind public coinWind;\n    // The CartoonToken TOKEN!\n    CartoonToken public cto;\n    // CTO tokens created per block.\n    uint256 public ctoPerBlock;\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when CTO mining starts.\n    uint256 public startBlock;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        CartoonToken _cto,\n        ERC721Ex _nCto,\n        IERC20 _swapToken,\n        IWETH _WETH,\n        ICoinWind _coinWind,\n        uint256 _ctoPerBlock,\n        uint256 _startBlock,\n        CardSpec _cardSpec,\n        address _devaddr\n    ) {\n        cto = _cto;\n        nCto = _nCto;\n        swapToken = _swapToken;\n        WETH = _WETH;\n        coinWind = _coinWind;\n        ctoPerBlock = _ctoPerBlock;\n        startBlock = _startBlock;\n        cardSpec = _cardSpec;\n        devaddr = _devaddr;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        uint256 _cardId,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        uint256 identity = cardSpec.getIdentityFromCardId(_cardId);\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                lpAmount: 0,\n                tokenIdentity: identity,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accCtoPerShare: 0\n            })\n        );\n    }\n\n    // Update the given pool's CTO allocation point. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\n        return _to.sub(_from);\n    }\n\n    // View function to see pending CTOs on frontend.\n    function pendingCto(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accCtoPerShare = pool.accCtoPerShare;\n        uint256 lpSupply = pool.lpAmount;\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 ctoReward = multiplier.mul(ctoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accCtoPerShare = accCtoPerShare.add(ctoReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accCtoPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpAmount;\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 ctoReward = multiplier.mul(ctoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        cto.mint(address(this), ctoReward);\n        pool.accCtoPerShare = pool.accCtoPerShare.add(ctoReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to MasterChef for CTO allocation.\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        uint256 _tokenId\n    ) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n\n        if (user.tokenId == 0) {\n            require(cardSpec.getTokenIdentity(_tokenId) == pool.tokenIdentity, 'token identity mismatch');\n            TransferHelper.safeTransferFrom(address(nCto), msg.sender, address(this), _tokenId);\n            user.tokenId = _tokenId;\n        }\n\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n            safeCtoTransfer(msg.sender, pending);\n        }\n        pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n        pool.lpAmount = pool.lpAmount.add(_amount);\n\n        // if no paused, invested\n        if (!paused()) {\n            invest(_pid);\n        }\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    function depositETH(uint256 _pid, uint256 _tokenId) public payable {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(address(pool.lpToken) == address(WETH), 'wrong lp token');\n        uint256 _amount = msg.value;\n        WETH.deposit{value: _amount}();\n        updatePool(_pid);\n\n        if (user.tokenId == 0) {\n            require(cardSpec.getTokenIdentity(_tokenId) == pool.tokenIdentity, 'token identity mismatch');\n            TransferHelper.safeTransferFrom(address(nCto), msg.sender, address(this), _tokenId);\n            user.tokenId = _tokenId;\n        }\n\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n            safeCtoTransfer(msg.sender, pending);\n        }\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n        pool.lpAmount = pool.lpAmount.add(_amount);\n\n        // if no paused, invested\n        if (!paused()) {\n            invest(_pid);\n        }\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, 'withdraw: not good');\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n        safeCtoTransfer(msg.sender, pending);\n        user.amount = user.amount.sub(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n\n        // withdraw nft token\n        if (user.amount == 0) {\n            TransferHelper.safeTransfer(address(nCto), msg.sender, user.tokenId);\n            user.tokenId = 0;\n        }\n\n        // if balance not enough, withdraw from invests\n        uint256 localBalance = pool.lpToken.balanceOf(address(this));\n        if (localBalance < _amount) {\n            coinWind.withdraw(address(pool.lpToken), _amount.sub(localBalance));\n        }\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        pool.lpAmount = pool.lpAmount.sub(_amount);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    function withdrawETH(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(address(pool.lpToken) == address(WETH), 'wrong lp token');\n        require(user.amount >= _amount, 'withdraw: not good');\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n        safeCtoTransfer(msg.sender, pending);\n        user.amount = user.amount.sub(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n\n        // withdraw nft token\n        if (user.amount == 0) {\n            TransferHelper.safeTransfer(address(nCto), msg.sender, user.tokenId);\n            user.tokenId = 0;\n        }\n\n        // if balance not enough, withdraw from invests\n        uint256 localBalance = pool.lpToken.balanceOf(address(this));\n        if (localBalance < _amount) {\n            coinWind.withdraw(address(pool.lpToken), _amount.sub(localBalance));\n        }\n        pool.lpAmount = pool.lpAmount.sub(_amount);\n        WETH.withdraw(_amount);\n        TransferHelper.safeTransferETH(msg.sender, _amount);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        uint256 localBalance = pool.lpToken.balanceOf(address(this));\n\n        if (localBalance < user.amount) {\n            coinWind.withdraw(address(pool.lpToken), user.amount.sub(localBalance));\n        }\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n        pool.lpAmount = pool.lpAmount.sub(user.amount);\n        TransferHelper.safeTransfer(address(nCto), msg.sender, user.tokenId);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n        user.tokenId = 0;\n    }\n\n    function emergencyWithdrawETH(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        require(address(pool.lpToken) == address(WETH), 'wrong lp token');\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        uint256 localBalance = pool.lpToken.balanceOf(address(this));\n        if (localBalance < user.amount) {\n            coinWind.withdraw(address(pool.lpToken), user.amount.sub(localBalance));\n        }\n\n        pool.lpAmount = pool.lpAmount.sub(user.amount);\n        TransferHelper.safeTransfer(address(nCto), msg.sender, user.tokenId);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.tokenId = 0;\n        user.rewardDebt = 0;\n        WETH.withdraw(user.amount);\n        TransferHelper.safeTransferETH(msg.sender, user.amount);\n    }\n\n    // Safe cto transfer function, just in case if rounding error causes pool to not have enough CTOs.\n    function safeCtoTransfer(address _to, uint256 _amount) internal {\n        uint256 ctoBal = cto.balanceOf(address(this));\n        if (_amount > ctoBal) {\n            cto.transfer(_to, ctoBal);\n        } else {\n            cto.transfer(_to, _amount);\n        }\n    }\n\n    // do coinWind deposit\n    function invest(uint256 _pid) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n\n        uint256 coinWindPid = coinWind.getPoolId(address(pool.lpToken));\n        ICoinWind.PoolInfo memory info = coinWind.poolInfo(coinWindPid);\n        uint256 amount = pool.lpToken.balanceOf(address(this));\n\n        // no limit,if zero\n        if (info.totalAmountLimit != 0) {\n            uint256 remainingAmount = info.totalAmountLimit.sub(info.totalAmount);\n            if (amount > remainingAmount) {\n                amount = remainingAmount;\n            }\n        }\n        pool.lpToken.approve(address(coinWind), amount);\n        coinWind.deposit(address(pool.lpToken), amount);\n    }\n\n    function massInvest() external whenNotPaused {\n        for (uint256 _pid; _pid < poolInfo.length; ++_pid) {\n            invest(_pid);\n        }\n    }\n\n    // withdrawAll from invest\n    function withdrawAllFromInvest() external onlyOwner whenPaused {\n        for (uint256 _pid; _pid < poolInfo.length; ++_pid) {\n            PoolInfo storage pool = poolInfo[_pid];\n            coinWind.withdrawAll(address(pool.lpToken));\n        }\n    }\n\n    function pause() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    function unpause() external onlyOwner whenPaused {\n        _unpause();\n    }\n\n    function dev(address _devaddr) external {\n        require(devaddr == msg.sender, 'wut?');\n        devaddr = _devaddr;\n    }\n\n    function claim() external {\n        for (uint256 pid; pid < poolInfo.length; ++pid) {\n            PoolInfo storage pool = poolInfo[pid];\n            coinWind.withdraw(address(pool.lpToken), 0);\n        }\n        swapToken.safeTransfer(devaddr, swapToken.balanceOf(address(this)));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/CartoonToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20Capped.sol';\nimport '@openzeppelin/contracts/access/AccessControl.sol';\n\ncontract CartoonToken is ERC20Capped, AccessControl {\n    bytes32 public constant MINT_ROLE = keccak256('MINT_ROLE');\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n\n    constructor(address _dev) ERC20('CartoonToken', 'CTO') ERC20Capped(130000000 * 10**18) {\n        _setupRole(ADMIN_ROLE, _dev);\n        _setRoleAdmin(MINT_ROLE, ADMIN_ROLE);\n    }\n\n    function mint(address to, uint256 amount) public {\n        require(hasRole(MINT_ROLE, _msgSender()), 'Must have mint role');\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/interfaces/ICoinWind.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\npragma experimental ABIEncoderV2;\n\ninterface ICoinWind {\n    struct PoolInfo {\n        address token;\n        uint256 lastRewardBlock;\n        uint256 accMdxPerShare;\n        uint256 govAccMdxPerShare;\n        uint256 accMdxShare;\n        uint256 totalAmount;\n        uint256 totalAmountLimit;\n        uint256 profit;\n        uint256 earnLowerlimit;\n        uint256 min;\n        uint256 lastRewardBlockProfit;\n    }\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n        uint256 govRewardDebt;\n    }\n\n    function deposit(address token, uint256 wad) external; //47e7ef24\n\n    function depositAll(address token) external; //9f0d5f27\n\n    function withdraw(address token, uint256 wad) external; //f3fef3a3\n\n    function withdrawAll(address token) external; //\n\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory info);\n\n    function poolLength() external view returns (uint256 length);\n\n    function getPoolId(address token) external view returns (uint256 pid);\n\n    function userlInfo(uint256 _pid, address from) external view returns (UserInfo memory info);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    using SafeMath for uint256;\n\n    uint256 private _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor (uint256 cap_) internal {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - minted tokens must not cause the total supply to go over the cap.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) { // When minting tokens\n            require(totalSupply().add(amount) <= cap(), \"ERC20Capped: cap exceeded\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/pool/mdx/MdxPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport '../../interfaces/IWETH.sol';\nimport '../../interfaces/IMasterChef.sol';\nimport '../../interfaces/IMdexFactory.sol';\nimport '../../interfaces/IUniswapV2Pair.sol';\nimport '../../libraries/TransferHelper.sol';\nimport '../../CartoonToken.sol';\n\ncontract MdxPool is Ownable {\n    using SafeMath for uint256;\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. CTOs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that CTOs distribution occurs.\n        uint256 accCtoPerShare; // Accumulated CTOs per share, times 1e12. See below.\n        uint256 chefPid; // masterChef pool id\n        uint256 lpBalance; // lp balance\n    }\n    // The CTO TOKEN!\n    CartoonToken public cto;\n    // Dev address.\n    address public devaddr;\n    // CTO tokens created per block.\n    uint256 public ctoPerBlock;\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when CTO mining starts.\n    uint256 public startBlock;\n\n    // invest chef address\n    IMasterChef public chef;\n\n    // invest weth address\n    address public WETH;\n\n    // reward chef token\n    IERC20 public chefToken;\n\n    // lp factory\n    address public factory;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        CartoonToken _cto,\n        address _devaddr,\n        uint256 _ctoPerBlock,\n        uint256 _startBlock,\n        address _WETH,\n        IERC20 _chefToken,\n        address _factory\n    ) {\n        cto = _cto;\n        devaddr = _devaddr;\n        ctoPerBlock = _ctoPerBlock;\n        startBlock = _startBlock;\n        WETH = _WETH;\n        chefToken = _chefToken;\n        factory = _factory;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        uint256 _chefPid,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accCtoPerShare: 0,\n                chefPid: _chefPid,\n                lpBalance: 0\n            })\n        );\n    }\n\n    // Update the given pool's CTO allocation point. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        uint256 _chefPid,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n        poolInfo[_pid].chefPid = _chefPid;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\n        return _to.sub(_from);\n    }\n\n    // View function to see pending CTOs on frontend.\n    function pendingCto(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accCtoPerShare = pool.accCtoPerShare;\n        uint256 lpSupply = pool.lpBalance;\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 ctoReward = multiplier.mul(ctoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accCtoPerShare = accCtoPerShare.add(ctoReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accCtoPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpBalance;\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 ctoReward = multiplier.mul(ctoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n\n        // set allocPoint to zero if mint to cap\n        cto.mint(address(this), ctoReward);\n        pool.accCtoPerShare = pool.accCtoPerShare.add(ctoReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    function depositTokens(\n        uint256 _pid,\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) public {\n        uint256 _amount;\n        address pair = pairFor(tokenA, tokenB);\n        PoolInfo storage pool = poolInfo[_pid];\n        require(pair == address(pool.lpToken), 'wrong pid');\n        updatePool(_pid);\n        if (amountADesired != 0) {\n            (, , _amount) = addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, address(this));\n            pool.lpToken.approve(address(chef), _amount);\n            chef.deposit(pool.chefPid, _amount);\n            safeClaimToDev();\n        }\n        _deposit(_pid, _amount);\n    }\n\n    function depositETH(\n        uint256 _pid,\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin\n    ) public payable {\n        uint256 _amount;\n        address pair = pairFor(token, WETH);\n        PoolInfo storage pool = poolInfo[_pid];\n        require(pair == address(pool.lpToken), 'wrong pid');\n        updatePool(_pid);\n        if (amountTokenDesired != 0) {\n            (, , _amount) = addLiquidityETH(token, amountTokenDesired, amountTokenMin, amountETHMin, address(this));\n            pool.lpToken.approve(address(chef), _amount);\n            chef.deposit(pool.chefPid, _amount);\n            safeClaimToDev();\n        }\n        _deposit(_pid, _amount);\n    }\n\n    // Deposit LP tokens to MasterChef for CTO allocation.\n    function _deposit(uint256 _pid, uint256 _amount) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n            safeCtoTransfer(msg.sender, pending);\n        }\n        pool.lpBalance = pool.lpBalance.add(_amount);\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    function withdrawTokens(\n        uint256 _pid,\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) public {\n        address pair = pairFor(tokenA, tokenB);\n        PoolInfo storage pool = poolInfo[_pid];\n        require(pair == address(pool.lpToken), 'wrong pid');\n        updatePool(_pid);\n        withdraw(_pid, liquidity);\n        if (liquidity != 0) {\n            chef.withdraw(pool.chefPid, liquidity);\n            safeClaimToDev();\n            removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, msg.sender);\n        }\n    }\n\n    function withdrawETH(\n        uint256 _pid,\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin\n    ) public {\n        address pair = pairFor(token, WETH);\n        PoolInfo storage pool = poolInfo[_pid];\n        require(pair == address(pool.lpToken), 'wrong pid');\n        updatePool(_pid);\n        withdraw(_pid, liquidity);\n        if (liquidity != 0) {\n            chef.withdraw(pool.chefPid, liquidity);\n            safeClaimToDev();\n            uint256 amountToken;\n            uint256 amountETH;\n            (amountToken, amountETH) = removeLiquidity(token, WETH, liquidity, amountTokenMin, amountETHMin, address(this));\n            TransferHelper.safeTransfer(token, msg.sender, amountToken);\n            IWETH(WETH).withdraw(amountETH);\n            TransferHelper.safeTransferETH(msg.sender, amountETH);\n        }\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, 'withdraw: not good');\n\n        uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n        safeCtoTransfer(msg.sender, pending);\n\n        pool.lpBalance = pool.lpBalance.sub(_amount);\n        user.amount = user.amount.sub(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdrawTokens(\n        uint256 _pid,\n        address tokenA,\n        address tokenB,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        address pair = pairFor(tokenA, tokenB);\n        require(pair == address(pool.lpToken), 'wrong pid');\n\n        chef.withdraw(pool.chefPid, user.amount);\n        removeLiquidity(tokenA, tokenB, user.amount, amountAMin, amountBMin, msg.sender);\n\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        pool.lpBalance = pool.lpBalance.sub(user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    function emergencyWithdrawETH(\n        uint256 _pid,\n        address token,\n        uint256 amountTokenMin,\n        uint256 amountETHMin\n    ) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        address pair = pairFor(token, WETH);\n        require(pair == address(pool.lpToken), 'wrong pid');\n\n        chef.withdraw(pool.chefPid, user.amount);\n        uint256 amountToken;\n        uint256 amountETH;\n        (amountToken, amountETH) = removeLiquidity(token, WETH, user.amount, amountTokenMin, amountETHMin, address(this));\n        TransferHelper.safeTransfer(token, msg.sender, amountToken);\n        IWETH(WETH).withdraw(amountETH);\n\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        pool.lpBalance = pool.lpBalance.sub(user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n\n        TransferHelper.safeTransferETH(msg.sender, amountETH);\n    }\n\n    // Safe cto transfer function, just in case if rounding error causes pool to not have enough CTOs.\n    function safeCtoTransfer(address _to, uint256 _amount) internal {\n        uint256 ctoBal = cto.balanceOf(address(this));\n        if (_amount > ctoBal) {\n            cto.transfer(_to, ctoBal);\n        } else {\n            cto.transfer(_to, _amount);\n        }\n    }\n\n    // Update dev address by the previous dev.\n    function dev(address _devaddr) public onlyOwner {\n        devaddr = _devaddr;\n    }\n\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = IMdexFactory(factory).pairFor(tokenA, tokenB);\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) internal view returns (uint256 amountA, uint256 amountB) {\n        (uint256 reserveA, uint256 reserveB) = IMdexFactory(factory).getReserves(tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint256 amountBOptimal = IMdexFactory(factory).quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, 'INSUFFICIENT_B_AMOUNT');\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint256 amountAOptimal = IMdexFactory(factory).quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(amountAOptimal >= amountAMin, 'INSUFFICIENT_A_AMOUNT');\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    // add token liquidity\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to\n    )\n        internal\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        )\n    {\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        address pair = pairFor(tokenA, tokenB);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        liquidity = IUniswapV2Pair(pair).mint(to);\n    }\n\n    // add eth liquidity\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to\n    )\n        internal\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        )\n    {\n        (amountToken, amountETH) = _addLiquidity(token, WETH, amountTokenDesired, msg.value, amountTokenMin, amountETHMin);\n        address pair = pairFor(token, WETH);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n        liquidity = IUniswapV2Pair(pair).mint(to);\n        // refund dust eth, if any\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to\n    ) internal returns (uint256 amountA, uint256 amountB) {\n        address pair = pairFor(tokenA, tokenB);\n        IUniswapV2Pair(pair).transfer(pair, liquidity);\n        // send liquidity to pair\n        (uint256 amount0, uint256 amount1) = IUniswapV2Pair(pair).burn(to);\n        (address token0, ) = IMdexFactory(factory).sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, 'INSUFFICIENT_A_AMOUNT');\n        require(amountB >= amountBMin, 'INSUFFICIENT_B_AMOUNT');\n    }\n\n    function claimToDev(uint256 _pid) external onlyOwner {\n        PoolInfo storage pool = poolInfo[_pid];\n        chef.withdraw(pool.chefPid, 0);\n        TransferHelper.safeTransfer(address(chefToken), devaddr, chefToken.balanceOf(address(this)));\n    }\n\n    function safeClaimToDev() internal {\n        uint256 amount = chefToken.balanceOf(address(this));\n        if (amount > 0) {\n            TransferHelper.safeTransfer(address(chefToken), devaddr, amount);\n        }\n    }\n\n    fallback() external {}\n\n    receive() external payable {}\n}\n"
    },
    "contracts/interfaces/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IMasterChef {\n    // Info of each pool.\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IMdexFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\ninterface IMdexFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function feeToRate() external view returns (uint256);\n\n    function initCodeHash() external view returns (bytes32);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n\n    function setFeeToRate(uint256) external;\n\n    function setInitCodeHash(bytes32) external;\n\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\n\n    function pairFor(address tokenA, address tokenB) external view returns (address pair);\n\n    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external view returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external view returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/pool/MasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '../CartoonToken.sol';\n\n// Have fun reading it. Hopefully it's bug-free. God bless.\ncontract MasterChef is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. CTOs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that CTOs distribution occurs.\n        uint256 accCtoPerShare; // Accumulated CTOs per share, times 1e12. See below.\n    }\n    // The CTO TOKEN!\n    CartoonToken public cto;\n    // CTO tokens created per block.\n    uint256 public ctoPerBlock;\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when CTO mining starts.\n    uint256 public startBlock;\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        CartoonToken _cto,\n        uint256 _ctoPerBlock,\n        uint256 _startBlock\n    ) {\n        cto = _cto;\n        ctoPerBlock = _ctoPerBlock;\n        startBlock = _startBlock;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(PoolInfo({lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accCtoPerShare: 0}));\n    }\n\n    // Update the given pool's CTO allocation point. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\n        return _to.sub(_from);\n    }\n\n    // View function to see pending CTOs on frontend.\n    function pendingCto(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accCtoPerShare = pool.accCtoPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 ctoReward = multiplier.mul(ctoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accCtoPerShare = accCtoPerShare.add(ctoReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accCtoPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 ctoReward = multiplier.mul(ctoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n\n        // set allocPoint to zero if mint to cap\n        cto.mint(address(this), ctoReward);\n        pool.accCtoPerShare = pool.accCtoPerShare.add(ctoReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to MasterChef for CTO allocation.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n            safeCtoTransfer(msg.sender, pending);\n        }\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, 'withdraw: not good');\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n        safeCtoTransfer(msg.sender, pending);\n        user.amount = user.amount.sub(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    // Safe cto transfer function, just in case if rounding error causes pool to not have enough CTOs.\n    function safeCtoTransfer(address _to, uint256 _amount) internal {\n        uint256 ctoBal = cto.balanceOf(address(this));\n        if (_amount > ctoBal) {\n            cto.transfer(_to, ctoBal);\n        } else {\n            cto.transfer(_to, _amount);\n        }\n    }\n}\n"
    },
    "contracts/pool/coinWind/CoinWindPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.4;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\nimport '@openzeppelin/contracts/utils/Pausable.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport '../../CartoonToken.sol';\nimport '../../interfaces/ICoinWind.sol';\nimport '../../interfaces/IWETH.sol';\nimport '../../libraries/TransferHelper.sol';\n\n// Have fun reading it. Hopefully it's bug-free. God bless.\ncontract CoinWindPool is Ownable, Pausable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 lpAmount; // current lp amount;\n        uint256 allocPoint; // How many allocation points assigned to this pool. CTOs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that CTOs distribution occurs.\n        uint256 accCtoPerShare; // Accumulated CTOs per share, times 1e12. See below.\n    }\n\n    IERC20 public swapToken;\n    // weth\n    IWETH public WETH;\n\n    address public devaddr;\n\n    ICoinWind public coinWind;\n    // The CartoonToken TOKEN!\n    CartoonToken public cto;\n    // CTO tokens created per block.\n    uint256 public ctoPerBlock;\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when CTO mining starts.\n    uint256 public startBlock;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        CartoonToken _cto,\n        IERC20 _swapToken,\n        IWETH _WETH,\n        ICoinWind _coinWind,\n        uint256 _ctoPerBlock,\n        uint256 _startBlock,\n        address _devaddr\n    ) {\n        cto = _cto;\n        swapToken = _swapToken;\n        WETH = _WETH;\n        coinWind = _coinWind;\n        ctoPerBlock = _ctoPerBlock;\n        startBlock = _startBlock;\n        devaddr = _devaddr;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(PoolInfo({lpToken: _lpToken, lpAmount: 0, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accCtoPerShare: 0}));\n    }\n\n    // Update the given pool's CTO allocation point. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\n        return _to.sub(_from);\n    }\n\n    // View function to see pending CTOs on frontend.\n    function pendingCto(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accCtoPerShare = pool.accCtoPerShare;\n        uint256 lpSupply = pool.lpAmount;\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 ctoReward = multiplier.mul(ctoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accCtoPerShare = accCtoPerShare.add(ctoReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accCtoPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpAmount;\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 ctoReward = multiplier.mul(ctoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        cto.mint(address(this), ctoReward);\n        pool.accCtoPerShare = pool.accCtoPerShare.add(ctoReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to MasterChef for CTO allocation.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n            safeCtoTransfer(msg.sender, pending);\n        }\n        pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n        pool.lpAmount = pool.lpAmount.add(_amount);\n\n        // if no paused, invest\n        if (!paused()) {\n            invest(_pid);\n        }\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    function depositETH(uint256 _pid) public payable {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(address(pool.lpToken) == address(WETH), 'wrong lp token');\n        uint256 _amount = msg.value;\n        WETH.deposit{value: _amount}();\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n            safeCtoTransfer(msg.sender, pending);\n        }\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n        pool.lpAmount = pool.lpAmount.add(_amount);\n\n        // if no paused, invest\n        if (!paused()) {\n            invest(_pid);\n        }\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, 'withdraw: not good');\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n        safeCtoTransfer(msg.sender, pending);\n        user.amount = user.amount.sub(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n\n        // if balance not enough, withdraw from invests\n        uint256 localBalance = pool.lpToken.balanceOf(address(this));\n        if (localBalance < _amount) {\n            coinWind.withdraw(address(pool.lpToken), _amount.sub(localBalance));\n        }\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        pool.lpAmount = pool.lpAmount.sub(_amount);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    function withdrawETH(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(address(pool.lpToken) == address(WETH), 'wrong lp token');\n        require(user.amount >= _amount, 'withdraw: not good');\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n        safeCtoTransfer(msg.sender, pending);\n        user.amount = user.amount.sub(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n\n        // if balance not enough, withdraw from invests\n        uint256 localBalance = pool.lpToken.balanceOf(address(this));\n        if (localBalance < _amount) {\n            coinWind.withdraw(address(pool.lpToken), _amount.sub(localBalance));\n        }\n        pool.lpAmount = pool.lpAmount.sub(_amount);\n        WETH.withdraw(_amount);\n        TransferHelper.safeTransferETH(msg.sender, _amount);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        uint256 localBalance = pool.lpToken.balanceOf(address(this));\n        if (localBalance < user.amount) {\n            coinWind.withdraw(address(pool.lpToken), user.amount.sub(localBalance));\n        }\n\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n        pool.lpAmount = pool.lpAmount.sub(user.amount);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    function emergencyWithdrawETH(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        require(address(pool.lpToken) == address(WETH), 'wrong lp token');\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        uint256 localBalance = pool.lpToken.balanceOf(address(this));\n        if (localBalance < user.amount) {\n            coinWind.withdraw(address(pool.lpToken), user.amount.sub(localBalance));\n        }\n\n        pool.lpAmount = pool.lpAmount.sub(user.amount);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n        WETH.withdraw(user.amount);\n        TransferHelper.safeTransferETH(msg.sender, user.amount);\n    }\n\n    // Safe cto transfer function, just in case if rounding error causes pool to not have enough CTOs.\n    function safeCtoTransfer(address _to, uint256 _amount) internal {\n        uint256 ctoBal = cto.balanceOf(address(this));\n        if (_amount > ctoBal) {\n            cto.transfer(_to, ctoBal);\n        } else {\n            cto.transfer(_to, _amount);\n        }\n    }\n\n    // do coinWind deposit\n    function invest(uint256 _pid) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n\n        uint256 coinWindPid = coinWind.getPoolId(address(pool.lpToken));\n        ICoinWind.PoolInfo memory info = coinWind.poolInfo(coinWindPid);\n        uint256 amount = pool.lpToken.balanceOf(address(this));\n\n        // no limit,if zero\n        if (info.totalAmountLimit != 0) {\n            uint256 remainingAmount = info.totalAmountLimit.sub(info.totalAmount);\n            if (amount > remainingAmount) {\n                amount = remainingAmount;\n            }\n        }\n        pool.lpToken.approve(address(coinWind), amount);\n        coinWind.deposit(address(pool.lpToken), amount);\n    }\n\n    function massInvest() external whenNotPaused {\n        for (uint256 _pid; _pid < poolInfo.length; _pid++) {\n            invest(_pid);\n        }\n    }\n\n    // withdrawAll from invest\n    function withdrawAllFromInvest() external onlyOwner whenPaused {\n        for (uint256 _pid; _pid < poolInfo.length; ++_pid) {\n            PoolInfo storage pool = poolInfo[_pid];\n            coinWind.withdrawAll(address(pool.lpToken));\n        }\n    }\n\n    function pause() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    function unpause() external onlyOwner whenPaused {\n        _unpause();\n    }\n\n    function dev(address _devaddr) external {\n        require(devaddr == msg.sender, 'wut?');\n        devaddr = _devaddr;\n    }\n\n    function claim() external {\n        for (uint256 pid; pid < poolInfo.length; ++pid) {\n            PoolInfo storage pool = poolInfo[pid];\n            coinWind.withdraw(address(pool.lpToken), 0);\n        }\n        swapToken.safeTransfer(devaddr, swapToken.balanceOf(address(this)));\n    }\n}\n"
    },
    "contracts/MintCard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\nimport './CardSpec.sol';\nimport './ERC721Ex.sol';\n\n// mint tools for dev\ncontract MintCard is Ownable {\n    using Strings for uint256;\n    ERC721Ex public erc721Ex;\n    CardSpec public spec;\n\n    constructor(ERC721Ex _erc721Ex, CardSpec _spec) {\n        erc721Ex = _erc721Ex;\n        spec = _spec;\n    }\n\n    function mint(\n        address _to,\n        uint256 _cardId,\n        uint256 _quantity\n    ) external onlyOwner {\n        (uint256 skin, uint256 rarity, ) = spec.cardTypes(_cardId);\n        for (uint256 i = 0; i < _quantity; i++) {\n            uint256 tokenPreId =\n                (uint256(spec.NFT_SIGN()) << spec.NFT_SIGN_BIT()) |\n                    (uint256(skin) << spec.CARD_SKIN_BIT()) |\n                    (uint256(rarity) << spec.CARD_RARITY_BIT());\n            uint256 tokenId = erc721Ex.mint(_to, tokenPreId);\n            erc721Ex.setTokenURI(tokenId, uint256(tokenId >> spec.CARD_IDENTITY_PADDING_BIT()).toString());\n        }\n    }\n\n    // safeMint to contract\n    function safeMint(\n        address _to,\n        uint256 _cardId,\n        uint256 _quantity\n    ) external onlyOwner {\n        (uint256 skin, uint256 rarity, ) = spec.cardTypes(_cardId);\n        for (uint256 i = 0; i < _quantity; i++) {\n            uint256 tokenPreId =\n                (uint256(spec.NFT_SIGN()) << spec.NFT_SIGN_BIT()) |\n                    (uint256(skin) << spec.CARD_SKIN_BIT()) |\n                    (uint256(rarity) << spec.CARD_RARITY_BIT());\n            uint256 tokenId = erc721Ex.safeMint(_to, tokenPreId, '');\n            erc721Ex.setTokenURI(tokenId, uint256(tokenId >> spec.CARD_IDENTITY_PADDING_BIT()).toString());\n        }\n    }\n}\n"
    },
    "contracts/pool/cake/CakePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport '../../interfaces/IWETH.sol';\nimport '../../interfaces/IMasterChef.sol';\nimport '../../interfaces/IUniswapV2Factory.sol';\nimport '../../libraries/TransferHelper.sol';\nimport '../../libraries/PancakeLibrary.sol';\nimport '../../CartoonToken.sol';\n\ncontract CakePool is Ownable {\n    using SafeMath for uint256;\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. CTOs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that CTOs distribution occurs.\n        uint256 accCtoPerShare; // Accumulated CTOs per share, times 1e12. See below.\n        uint256 chefPid; // masterChef pool id\n        uint256 lpBalance; // lp balance\n    }\n    // The CTO TOKEN!\n    CartoonToken public cto;\n    // Dev address.\n    address public devaddr;\n    // CTO tokens created per block.\n    uint256 public ctoPerBlock;\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when CTO mining starts.\n    uint256 public startBlock;\n\n    // invest chef address\n    IMasterChef public chef;\n\n    // invest weth address\n    address public WETH;\n\n    // reward chef token\n    IERC20 public chefToken;\n\n    // lp factory\n    address public factory;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        CartoonToken _cto,\n        address _devaddr,\n        uint256 _ctoPerBlock,\n        uint256 _startBlock,\n        address _WETH,\n        IERC20 _chefToken,\n        address _factory\n    ) {\n        cto = _cto;\n        devaddr = _devaddr;\n        ctoPerBlock = _ctoPerBlock;\n        startBlock = _startBlock;\n        WETH = _WETH;\n        chefToken = _chefToken;\n        factory = _factory;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        uint256 _chefPid,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accCtoPerShare: 0,\n                chefPid: _chefPid,\n                lpBalance: 0\n            })\n        );\n    }\n\n    // Update the given pool's CTO allocation point. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        uint256 _chefPid,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n        poolInfo[_pid].chefPid = _chefPid;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\n        return _to.sub(_from);\n    }\n\n    // View function to see pending CTOs on frontend.\n    function pendingCto(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accCtoPerShare = pool.accCtoPerShare;\n        uint256 lpSupply = pool.lpBalance;\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 ctoReward = multiplier.mul(ctoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accCtoPerShare = accCtoPerShare.add(ctoReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accCtoPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpBalance;\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 ctoReward = multiplier.mul(ctoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n\n        // set allocPoint to zero if mint to cap\n        cto.mint(address(this), ctoReward);\n        pool.accCtoPerShare = pool.accCtoPerShare.add(ctoReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    function depositTokens(\n        uint256 _pid,\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) public {\n        uint256 _amount;\n        address pair = pairFor(tokenA, tokenB);\n        PoolInfo storage pool = poolInfo[_pid];\n        require(pair == address(pool.lpToken), 'wrong pid');\n        updatePool(_pid);\n        if (amountADesired != 0) {\n            (, , _amount) = addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, address(this));\n            pool.lpToken.approve(address(chef), _amount);\n            chef.deposit(pool.chefPid, _amount);\n            safeClaimToDev();\n        }\n        _deposit(_pid, _amount);\n    }\n\n    function depositETH(\n        uint256 _pid,\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin\n    ) public payable {\n        uint256 _amount;\n        address pair = pairFor(token, WETH);\n        PoolInfo storage pool = poolInfo[_pid];\n        require(pair == address(pool.lpToken), 'wrong pid');\n        updatePool(_pid);\n        if (amountTokenDesired != 0) {\n            (, , _amount) = addLiquidityETH(token, amountTokenDesired, amountTokenMin, amountETHMin, address(this));\n            pool.lpToken.approve(address(chef), _amount);\n            chef.deposit(pool.chefPid, _amount);\n            safeClaimToDev();\n        }\n        _deposit(_pid, _amount);\n    }\n\n    // Deposit LP tokens to MasterChef for CTO allocation.\n    function _deposit(uint256 _pid, uint256 _amount) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n            safeCtoTransfer(msg.sender, pending);\n        }\n        pool.lpBalance = pool.lpBalance.add(_amount);\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    function withdrawTokens(\n        uint256 _pid,\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) public {\n        address pair = pairFor(tokenA, tokenB);\n        PoolInfo storage pool = poolInfo[_pid];\n        require(pair == address(pool.lpToken), 'wrong pid');\n        updatePool(_pid);\n        withdraw(_pid, liquidity);\n        if (liquidity != 0) {\n            chef.withdraw(pool.chefPid, liquidity);\n            safeClaimToDev();\n            removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, msg.sender);\n        }\n    }\n\n    function withdrawETH(\n        uint256 _pid,\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin\n    ) public {\n        address pair = pairFor(token, WETH);\n        PoolInfo storage pool = poolInfo[_pid];\n        require(pair == address(pool.lpToken), 'wrong pid');\n        updatePool(_pid);\n        withdraw(_pid, liquidity);\n        if (liquidity != 0) {\n            chef.withdraw(pool.chefPid, liquidity);\n            safeClaimToDev();\n            uint256 amountToken;\n            uint256 amountETH;\n            (amountToken, amountETH) = removeLiquidity(token, WETH, liquidity, amountTokenMin, amountETHMin, address(this));\n            TransferHelper.safeTransfer(token, msg.sender, amountToken);\n            IWETH(WETH).withdraw(amountETH);\n            TransferHelper.safeTransferETH(msg.sender, amountETH);\n        }\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, 'withdraw: not good');\n\n        uint256 pending = user.amount.mul(pool.accCtoPerShare).div(1e12).sub(user.rewardDebt);\n        safeCtoTransfer(msg.sender, pending);\n\n        pool.lpBalance = pool.lpBalance.sub(_amount);\n        user.amount = user.amount.sub(_amount);\n        user.rewardDebt = user.amount.mul(pool.accCtoPerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdrawTokens(\n        uint256 _pid,\n        address tokenA,\n        address tokenB,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        address pair = pairFor(tokenA, tokenB);\n        require(pair == address(pool.lpToken), 'wrong pid');\n\n        chef.withdraw(pool.chefPid, user.amount);\n        removeLiquidity(tokenA, tokenB, user.amount, amountAMin, amountBMin, msg.sender);\n\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        pool.lpBalance = pool.lpBalance.sub(user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    function emergencyWithdrawETH(\n        uint256 _pid,\n        address token,\n        uint256 amountTokenMin,\n        uint256 amountETHMin\n    ) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        address pair = pairFor(token, WETH);\n        require(pair == address(pool.lpToken), 'wrong pid');\n\n        chef.withdraw(pool.chefPid, user.amount);\n        uint256 amountToken;\n        uint256 amountETH;\n        (amountToken, amountETH) = removeLiquidity(token, WETH, user.amount, amountTokenMin, amountETHMin, address(this));\n        TransferHelper.safeTransfer(token, msg.sender, amountToken);\n        IWETH(WETH).withdraw(amountETH);\n\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        pool.lpBalance = pool.lpBalance.sub(user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n\n        TransferHelper.safeTransferETH(msg.sender, amountETH);\n    }\n\n    // Safe cto transfer function, just in case if rounding error causes pool to not have enough CTOs.\n    function safeCtoTransfer(address _to, uint256 _amount) internal {\n        uint256 ctoBal = cto.balanceOf(address(this));\n        if (_amount > ctoBal) {\n            cto.transfer(_to, ctoBal);\n        } else {\n            cto.transfer(_to, _amount);\n        }\n    }\n\n    // Update dev address by the previous dev.\n    function dev(address _devaddr) public onlyOwner {\n        devaddr = _devaddr;\n    }\n\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = PancakeLibrary.pairFor(factory, tokenA, tokenB);\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) internal view returns (uint256 amountA, uint256 amountB) {\n        (uint256 reserveA, uint256 reserveB) = PancakeLibrary.getReserves(factory, tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint256 amountBOptimal = PancakeLibrary.quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, 'INSUFFICIENT_B_AMOUNT');\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint256 amountAOptimal = PancakeLibrary.quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(amountAOptimal >= amountAMin, 'INSUFFICIENT_A_AMOUNT');\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to\n    )\n        internal\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        )\n    {\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        address pair = pairFor(tokenA, tokenB);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        liquidity = IUniswapV2Pair(pair).mint(to);\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to\n    )\n        internal\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        )\n    {\n        (amountToken, amountETH) = _addLiquidity(token, WETH, amountTokenDesired, msg.value, amountTokenMin, amountETHMin);\n        address pair = pairFor(token, WETH);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n        liquidity = IUniswapV2Pair(pair).mint(to);\n        // refund dust eth, if any\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to\n    ) internal returns (uint256 amountA, uint256 amountB) {\n        address pair = pairFor(tokenA, tokenB);\n        IUniswapV2Pair(pair).transfer(pair, liquidity);\n        // send liquidity to pair\n        (uint256 amount0, uint256 amount1) = IUniswapV2Pair(pair).burn(to);\n        (address token0, ) = PancakeLibrary.sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, 'INSUFFICIENT_A_AMOUNT');\n        require(amountB >= amountBMin, 'INSUFFICIENT_B_AMOUNT');\n    }\n\n    function claimToDev(uint256 _pid) external onlyOwner {\n        PoolInfo storage pool = poolInfo[_pid];\n        chef.withdraw(pool.chefPid, 0);\n        TransferHelper.safeTransfer(address(chefToken), devaddr, chefToken.balanceOf(address(this)));\n    }\n\n    function safeClaimToDev() internal {\n        uint256 amount = chefToken.balanceOf(address(this));\n        if (amount > 0) {\n            TransferHelper.safeTransfer(address(chefToken), devaddr, amount);\n        }\n    }\n\n    fallback() external {}\n\n    receive() external payable {}\n}\n"
    },
    "contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/libraries/PancakeLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.4;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\n\nlibrary PancakeLibrary {\n    using SafeMath for uint256;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'PancakeLibrary: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'PancakeLibrary: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encodePacked(token0, token1)),\n                        hex'd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66' // init code hash\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        pairFor(factory, tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, 'PancakeLibrary: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, 'PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY');\n        uint256 amountInWithFee = amountIn.mul(998);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, 'PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY');\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(998);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, 'PancakeLibrary: INVALID_PATH');\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, 'PancakeLibrary: INVALID_PATH');\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.4;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary SafeERC20 {\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\n        return success && data.length > 0 ? abi.decode(data, (string)) : '???';\n    }\n\n    function safeName(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\n        return success && data.length > 0 ? abi.decode(data, (string)) : '???';\n    }\n\n    function safeDecimals(IERC20 token) public view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SafeERC20: Transfer failed');\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, address(this), amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SafeERC20: TransferFrom failed');\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}